{
    "openapi": "3.0.3",
    "externalDocs": {
        "url": "https://docs.castle.io/docs/",
        "description": "Check out the Castle docs for more in-depth guides"
    },
    "info": {
        "version": "1",
        "title": "Castle API",
        "termsOfService": "https://castle.io/terms",
        "x-logo": {
            "url": "https://reference.castle.io/assets/img/castle-logo-sidebar.png",
            "altText": "Castle Logo"
        },
        "description": "## Introduction\n\n**Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**\n\nCastle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.\n\nAll API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.\n\n## Supported types\n\nFor a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).\n\n## Rate limits\n\nOur APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:\n\n- `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window.\n- `X-RateLimit-Remaining` - The number of requests remaining in the current time window.\n- `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.\n\nAdditionally, Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds.\n"
    },
    "tags": [
        {
            "name": "risk_assessment",
            "x-displayName": "Risk Assessment",
            "description": "Castle Risk Assessment APIs will calculate a risk score as well as evaluate policies based on the provided payload.\nThe result can then be used to take the appropriate action, such as blocking the request or put the user through additional verification.\n\nAdditionally, the result will be logged together with the provided payload so it can be viewed and searched in the Castle Dashboard.\n"
        },
        {
            "name": "logging",
            "x-displayName": "Logging",
            "description": "Log important user events without invoking or returning the Castle risk score. These events will viewable and searchable in the Castle Dashboard. Having access to a detailed log of actions can provide crucial information eg. in a fraud investigation case.\n"
        },
        {
            "name": "events",
            "x-displayName": "Events",
            "description": "Castle Events APIs allow you to query and aggregate Events that have been sent to the Castle [Risk Assessment APIs](#tag/risk_assessment).\n\n**These APIs are currently in beta and available only to select customers**. They are also subject to change.\nIf you are interested in using these APIs, please contact us at [support@castle.io](mailto:support@castle.io).\n\nPlease visit our [documentation page](https://docs.castle.io/docs/enterprise-using-events-api) to get a broader description of this suite of APIs.\n"
        },
        {
            "name": "privacy",
            "x-displayName": "Privacy",
            "description": "APIs intended to help adhere to GDPR Compliance and specifically assist in supporting Article 15: Right of access by the data subject and Article 17: Right to be forgotten.\n"
        },
        {
            "name": "lists",
            "x-displayName": "Lists",
            "description": "Lists represents a generic collection of items, such as Users, IPs, Transactions or any custom property. Lists helps you organize and collaborate cross team members and when used together with policies, they can effectively act as allow- or denylists.\n\n\nRead more about lists [here](https://docs.castle.io/docs/lists).\n"
        },
        {
            "name": "list_items",
            "x-displayName": "List Items",
            "description": "List Items represents entries in a List. Each value will correspond to the field definition in the associated List.\n"
        }
    ],
    "x-tagGroups": [
        {
            "name": "Event",
            "tags": [
                "risk_assessment",
                "logging"
            ]
        },
        {
            "name": "Lists",
            "tags": [
                "lists",
                "list_items"
            ]
        },
        {
            "name": "Beta",
            "tags": [
                "events"
            ]
        },
        {
            "name": "Privacy",
            "tags": [
                "privacy"
            ]
        }
    ],
    "servers": [
        {
            "url": "https://api.castle.io/v1",
            "description": "Official Castle API domain"
        }
    ],
    "security": [
        {
            "Basic": [
                "secret"
            ]
        }
    ],
    "paths": {
        "/risk": {
            "post": {
                "summary": "Risk",
                "description": "Used to request a risk evaluation from Castle's API. The most obvious use of this is for login requests, where the API can indicate malicious and questionable circumstances. Read more in the [Prevent Account Takeovers](https://docs.castle.io/docs/automate-account-recovery) section. See the [List of Recognized Events](https://docs.castle.io/docs/events) for supported events.\n",
                "operationId": "risk",
                "tags": [
                    "risk_assessment"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Risk"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Castle Event Context",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterAndRiskResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/risk \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"context\":{\"headers\":[[\"User-Agent\",\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15\"],[\"Accept-Encoding\",\"gzip, deflate, br\"],[\"Accept-Language\",\"en-us\"],[\"Accept\",\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"],[\"Connection\",\"close\"],[\"Host\",\"castle.io\"]],\"ip\":\"211.96.77.55\"},\"properties\":{\"property1\":{},\"property2\":{}},\"product\":{\"id\":\"string\"},\"session\":{\"id\":\"string\",\"created_at\":\"2019-08-24T14:15:22Z\"},\"created_at\":\"2019-08-24T14:15:22Z\",\"request_token\":\"test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4\",\"user\":{\"id\":\"string\",\"email\":\"пошта@укр.нет\",\"phone\":\"string\",\"registered_at\":\"2019-08-24T14:15:22Z\",\"name\":\"string\",\"traits\":{},\"address\":{\"line1\":\"60 Rausch Street\",\"line2\":\"string\",\"city\":\"San Francisco\",\"country_code\":\"US\",\"region_code\":\"CA\",\"postal_code\":\"94103\",\"fingerprint\":\"8a33j2lir9\"}},\"skip_request_token_validation\":false,\"skip_context_validation\":false,\"expand\":[\"all\"],\"type\":\"$challenge\",\"status\":\"$requested\",\"authentication_method\":{\"type\":\"$social\",\"variant\":\"facebook\"}}'"
                    }
                ]
            }
        },
        "/filter": {
            "post": {
                "summary": "Filter",
                "description": "Used to block bots and bad traffic early in the request chain, typically at registration. Read more in the [Protecting the Login](https://docs.castle.io/docs/login-activity) section. See the [List of Recognized Events](https://docs.castle.io/docs/events) for supported events.\n\n**At minimum the `User-Agent` key is required in the `headers` object.**\n",
                "operationId": "filter",
                "tags": [
                    "risk_assessment"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Filter"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Castle Event Context",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FilterAndRiskResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/filter \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"context\":{\"headers\":[[\"User-Agent\",\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15\"],[\"Accept-Encoding\",\"gzip, deflate, br\"],[\"Accept-Language\",\"en-us\"],[\"Accept\",\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"],[\"Connection\",\"close\"],[\"Host\",\"castle.io\"]],\"ip\":\"211.96.77.55\"},\"properties\":{\"property1\":{},\"property2\":{}},\"product\":{\"id\":\"string\"},\"session\":{\"id\":\"string\",\"created_at\":\"2019-08-24T14:15:22Z\"},\"created_at\":\"2019-08-24T14:15:22Z\",\"request_token\":\"test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4\",\"user\":{\"email\":\"Rhea.Franecki@example.org\",\"phone\":\"+16175551212\"},\"params\":{\"email\":\"Rhea.Franecki@example.org\",\"phone\":\"+16175551212\",\"username\":\"superhero123\"},\"matching_user_id\":\"123\",\"skip_request_token_validation\":false,\"skip_context_validation\":false,\"expand\":[\"all\"],\"type\":\"$registration\",\"status\":\"$attempted\",\"authentication_method\":{\"type\":\"$social\",\"variant\":\"facebook\"}}'"
                    }
                ]
            }
        },
        "/log": {
            "post": {
                "summary": "Log",
                "description": "Logs a user action. This endpoint doesn’t provide a response body and is designed for use in a non-blocking manner.\n",
                "operationId": "log",
                "tags": [
                    "logging"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Log"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Provides no response body"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/log \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"context\":{\"headers\":[[\"User-Agent\",\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15\"],[\"Accept-Encoding\",\"gzip, deflate, br\"],[\"Accept-Language\",\"en-us\"],[\"Accept\",\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"],[\"Connection\",\"close\"],[\"Host\",\"castle.io\"]],\"ip\":\"211.96.77.55\"},\"properties\":{\"property1\":{},\"property2\":{}},\"product\":{\"id\":\"string\"},\"session\":{\"id\":\"string\",\"created_at\":\"2019-08-24T14:15:22Z\"},\"created_at\":\"2019-08-24T14:15:22Z\",\"request_token\":\"test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4\",\"user\":{\"id\":\"78184d37-a8a0-4f61-a05a-9a8ed85b1e43\"},\"type\":\"$challenge\",\"status\":\"$requested\",\"authentication_method\":{\"type\":\"$social\",\"variant\":\"facebook\"}}'"
                    }
                ]
            }
        },
        "/lists": {
            "post": {
                "summary": "Create a new List",
                "operationId": "createList",
                "x-rate-limit": {
                    "limit": 10,
                    "period_in_seconds": 1
                },
                "tags": [
                    "lists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns the newly created List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/List"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/lists \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Malicious IPs\",\"description\":\"We block these IPs from withdrawing funds. Please be careful.\",\"color\":\"$red\",\"default_item_archivation_time\":2592000,\"primary_field\":\"device.fingerprint\",\"secondary_field\":\"ip.value\"}'"
                    }
                ]
            },
            "get": {
                "summary": "List all Lists",
                "operationId": "getLists",
                "x-rate-limit": {
                    "limit": 100,
                    "period_in_seconds": 1
                },
                "tags": [
                    "lists"
                ],
                "responses": {
                    "200": {
                        "description": "Returns all active Lists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListList"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.castle.io/v1/lists \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/lists/{id}": {
            "put": {
                "summary": "Update a List",
                "operationId": "updateList",
                "x-rate-limit": {
                    "limit": 10,
                    "period_in_seconds": 1
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "tags": [
                    "lists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateListRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns the updated List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/List"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"Malicious IPs\",\"description\":\"We block these IPs from withdrawing funds. Please be careful.\",\"color\":\"$red\",\"default_item_archivation_time\":2592000}'"
                    }
                ]
            },
            "get": {
                "summary": "Return a List by ID",
                "operationId": "getList",
                "x-rate-limit": {
                    "limit": 100,
                    "period_in_seconds": 1
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "tags": [
                    "lists"
                ],
                "responses": {
                    "200": {
                        "description": "Returns the List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListList"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            },
            "delete": {
                "summary": "Delete List",
                "operationId": "deleteList",
                "x-rate-limit": {
                    "limit": 10,
                    "period_in_seconds": 1
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "tags": [
                    "lists"
                ],
                "responses": {
                    "204": {
                        "description": "Provides no response body"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/lists/query": {
            "post": {
                "summary": "Search Lists",
                "operationId": "queryLists",
                "x-rate-limit": {
                    "limit": 30,
                    "period_in_seconds": 1
                },
                "tags": [
                    "lists"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListQuery"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a list of all the Lists matching the query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListQueryResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/lists/query \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"filters\":[{\"field\":\"primary_field\",\"op\":\"$eq\",\"value\":\"device.fingerprint\"},{\"field\":\"archived\",\"op\":\"$eq\",\"value\":false},{\"op\":\"$or\",\"value\":[{\"field\":\"secondary_field\",\"op\":\"$eq\",\"value\":\"user.id\"}]},{\"op\":\"$or\",\"value\":[{\"field\":\"secondary_field\",\"op\":\"$eq\",\"value\":\"user.email\"}]}],\"page\":2,\"results_size\":50,\"include_size_label\":true,\"sort\":{\"field\":\"created_at\",\"order\":\"asc\"}}'"
                    }
                ]
            }
        },
        "/lists/{list_id}/items": {
            "post": {
                "summary": "Create a new List Item",
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "operationId": "createListItem",
                "x-rate-limit": {
                    "limit": 60,
                    "period_in_seconds": 1
                },
                "tags": [
                    "list_items"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns the newly created List Item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"primary_value\":\"A04t7AcfSA69cBTTusx0RQ\",\"secondary_value\":\"2ee938c8-24c2-4c26-9d25-19511dd75029\",\"comment\":\"Fradulent user found through manual inspection\",\"author\":{\"type\":\"$analyst_email\",\"identifier\":\"string\"},\"auto_archives_at\":\"2021-09-27T16:46:38.313Z\",\"mode\":\"$error\"}'"
                    }
                ]
            }
        },
        "/lists/{list_id}/items/query": {
            "post": {
                "summary": "Search List Items",
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "operationId": "queryListItems",
                "x-rate-limit": {
                    "limit": 30,
                    "period_in_seconds": 1
                },
                "tags": [
                    "list_items"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ListItemQuery"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a list of all the List Items matching the query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListItemList"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items/query \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"page\":2,\"results_size\":50,\"sort\":{\"field\":\"created_at\",\"order\":\"asc\"},\"filters\":[{\"field\":\"archived\",\"op\":\"$eq\",\"value\":true}]}'"
                    }
                ]
            }
        },
        "/lists/{list_id}/items/{id}": {
            "put": {
                "summary": "Update a List Item",
                "operationId": "updateListItem",
                "x-rate-limit": {
                    "limit": 60,
                    "period_in_seconds": 1
                },
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List Item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "tags": [
                    "list_items"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateListItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns the updated List Item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"comment\":\"Listed due to manual investigation\"}'"
                    }
                ]
            },
            "get": {
                "summary": "Fetch a List Item by ID",
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List Item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "operationId": "getListItem",
                "x-rate-limit": {
                    "limit": 100,
                    "period_in_seconds": 1
                },
                "tags": [
                    "list_items"
                ],
                "responses": {
                    "200": {
                        "description": "Returns the matching List Item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/lists/{list_id}/items/{id}/archive": {
            "delete": {
                "summary": "Archive a List Item",
                "description": "Archives a List Item",
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List Item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "operationId": "archiveListItem",
                "x-rate-limit": {
                    "limit": 30,
                    "period_in_seconds": 1
                },
                "tags": [
                    "list_items"
                ],
                "responses": {
                    "204": {
                        "description": "Provides no response body"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items/e6baae3a-0636-441a-ba4f-c73f266c7a17/archive \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/lists/{list_id}/items/{id}/unarchive": {
            "put": {
                "summary": "Unarchive a List Item",
                "description": "Unarchives a List Item",
                "parameters": [
                    {
                        "name": "list_id",
                        "in": "path",
                        "description": "ID of the List",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the List Item",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                    }
                ],
                "operationId": "unarchiveListItem",
                "x-rate-limit": {
                    "limit": 30,
                    "period_in_seconds": 1
                },
                "tags": [
                    "list_items"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnarchiveListItemRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Provides no response body"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "409": {
                        "$ref": "#/components/responses/Conflict"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.castle.io/v1/lists/e6baae3a-0636-441a-ba4f-c73f266c7a17/items/e6baae3a-0636-441a-ba4f-c73f266c7a17/unarchive \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"auto_archives_at\":\"2021-09-27T16:46:38.313Z\"}'"
                    }
                ]
            }
        },
        "/privacy/users/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "ID of the user",
                    "required": true,
                    "schema": {
                        "type": "string"
                    },
                    "example": "e6baae3a-0636-441a-ba4f-c73f266c7a17"
                }
            ],
            "post": {
                "summary": "Request User Data",
                "description": "GDPR introduced [Article 15: Right of access by the data subject](https://gdpr-info.eu/art-15-gdpr/). This states that users have the right to request access to the data held on them. If you receive this request from your user, you may also need to forward the request to your vendors, such as Castle, so that the vendor can provide data related to this user as well.\nThis API endpoint is designed to be used for these User Data Access Requests.\n\n### **Important**: before you call this API you first need to [configure your company's privacy email](https://docs.castle.io/docs/gdpr-compliance#user-data-access-requests).\n\nWhen calling this endpoint, Castle will compile records pertaining to the associated user. When the data compilation is completed, an email containing a data download link will be sent to the configured privacy email address.\n",
                "operationId": "getUserPrivacyDeprecated",
                "deprecated": true,
                "tags": [
                    "privacy"
                ],
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/Accepted"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/privacy/users/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            },
            "delete": {
                "summary": "Delete User Data",
                "description": "GDPR introduced [Article 17: Right to be forgotten](https://gdpr-info.eu/art-17-gdpr/). This states that users have the right to request that all the data held on them be permanently purged. If you receive this request from your user, you may also need to forward the request to your vendors, such as Castle, so that the vendor can purge that user’s data too.\nThis API endpoint is designed to be used for these User Data Purge Requests. A call to this endpoint will permanently delete the user and their data from our systems.\n",
                "operationId": "deleteUserPrivacyDeprecated",
                "deprecated": true,
                "tags": [
                    "privacy"
                ],
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/Accepted"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.castle.io/v1/privacy/users/e6baae3a-0636-441a-ba4f-c73f266c7a17 \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/privacy/users": {
            "post": {
                "summary": "Request User Data",
                "description": "GDPR introduced [Article 15: Right of access by the data subject](https://gdpr-info.eu/art-15-gdpr/). This states that users have the right to request access to the data held on them. If you receive this request from your user, you may also need to forward the request to your vendors, such as Castle, so that the vendor can provide data related to this user as well.\nThis API endpoint is designed to be used for these User Data Access Requests.\n\n### **Important**: before you call this API you first need to [configure your company's privacy email](https://docs.castle.io/docs/gdpr-compliance#user-data-access-requests).\n\nWhen calling this endpoint, Castle will compile records pertaining to the associated user. When the data compilation is completed, an email containing a data download link will be sent to the configured privacy email address.\n",
                "operationId": "getUserPrivacy",
                "tags": [
                    "privacy"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrivacyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/Accepted"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.castle.io/v1/privacy/users \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"identifier\":\"Rhea.Franecki@example.org\",\"identifier_type\":\"$email\"}'"
                    }
                ]
            },
            "delete": {
                "summary": "Delete User Data",
                "description": "GDPR introduced [Article 17: Right to be forgotten](https://gdpr-info.eu/art-17-gdpr/). This states that users have the right to request that all the data held on them be permanently purged. If you receive this request from your user, you may also need to forward the request to your vendors, such as Castle, so that the vendor can purge that user’s data too.\nThis API endpoint is designed to be used for these User Data Purge Requests. A call to this endpoint will permanently delete the user and their data from our systems.\n",
                "operationId": "deleteUserPrivacy",
                "tags": [
                    "privacy"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrivacyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "$ref": "#/components/responses/Accepted"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.castle.io/v1/privacy/users \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"identifier\":\"Rhea.Franecki@example.org\",\"identifier_type\":\"$email\"}'"
                    }
                ]
            }
        },
        "/events/query": {
            "post": {
                "summary": "Search Events",
                "servers": [
                    {
                        "url": "https://beta.castle.io/v1"
                    }
                ],
                "description": "Search for events\n",
                "operationId": "queryEvents",
                "x-semaphore": {
                    "limit": 5,
                    "host": "beta.castle.io",
                    "id": "events-api"
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Query"
                            }
                        },
                        "text/csv": {
                            "schema": {
                                "$ref": "#/components/schemas/Query"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns the events that match the search criteria",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Events"
                                }
                            },
                            "text/csv": {
                                "schema": {
                                    "$ref": "#/components/schemas/Events"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://beta.castle.io/v1/events/query \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: text/csv' \\\n  --data '{\"filters\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\"}],\"query_type\":\"$count\",\"page\":1,\"aggregations\":[{\"name\":\"Critical Events per IP in 1h\",\"description\":\"Maximum Account TakeOver score seen per IP in the last day.\",\"interval\":86400,\"group_by\":{\"fields\":[{\"field\":\"ip.address\"}]},\"filters\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\"}],\"value\":{\"field\":\"scores.account_takeover.score\"},\"aggregation_type\":\"$avg\",\"metadata\":{\"whodunnit\":\"string\",\"whodunnit_type\":\"$analyst_email\",\"property1\":\"string\",\"property2\":\"string\"}}],\"columns\":[\"string\"],\"results_size\":1}'"
                    }
                ]
            }
        },
        "/events/schema": {
            "get": {
                "summary": "Get Events Schema",
                "servers": [
                    {
                        "url": "https://beta.castle.io/v1"
                    }
                ],
                "description": "Get schema for the Event object. Returns all fields with their respective descriptions, types and allowed funcs and operations.\n",
                "operationId": "getEventSchema",
                "tags": [
                    "events"
                ],
                "responses": {
                    "200": {
                        "description": "Returns the list of fields and buckets data to be used when requesting v1/events/query or v1/events/count",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://beta.castle.io/v1/events/schema \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH'"
                    }
                ]
            }
        },
        "/events/group": {
            "post": {
                "summary": "Group Events",
                "servers": [
                    {
                        "url": "https://beta.castle.io/v1"
                    }
                ],
                "description": "Aggregate on events\n",
                "operationId": "groupEvents",
                "x-semaphore": {
                    "limit": 5,
                    "host": "beta.castle.io",
                    "id": "events-api"
                },
                "tags": [
                    "events"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupQuery"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns the aggregation filtered by the filtered query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Results set of what the request query is. Includes group columns and all columns from the request",
                                    "required": [
                                        "total_count",
                                        "data"
                                    ],
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            },
                                            "example": [
                                                {
                                                    "user.id": "castle_user",
                                                    "Max Risk": 0.111,
                                                    "email": "test@test.com"
                                                },
                                                {
                                                    "user.id": "castle_user1",
                                                    "Max Risk": 0.411,
                                                    "email": "test1@test.com"
                                                },
                                                {
                                                    "user.id": "castle_user2",
                                                    "Max Risk": 0.611,
                                                    "email": "test2@test.com"
                                                },
                                                {
                                                    "user.id": "castle_user3",
                                                    "Max Risk": 0.931,
                                                    "email": "test3@test.com"
                                                },
                                                {
                                                    "user.id": "castle_user4",
                                                    "Max Risk": 0.913,
                                                    "email": "test4@test.com"
                                                }
                                            ]
                                        },
                                        "total_count": {
                                            "type": "integer",
                                            "minimum": 0,
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://beta.castle.io/v1/events/group \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"filters\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\"}],\"query_type\":\"$count\",\"page\":1,\"aggregations\":[{\"name\":\"Critical Events per IP in 1h\",\"description\":\"Maximum Account TakeOver score seen per IP in the last day.\",\"interval\":86400,\"group_by\":{\"fields\":[{\"field\":\"ip.address\"}]},\"filters\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\"}],\"value\":{\"field\":\"scores.account_takeover.score\"},\"aggregation_type\":\"$avg\",\"metadata\":{\"whodunnit\":\"string\",\"whodunnit_type\":\"$analyst_email\",\"property1\":\"string\",\"property2\":\"string\"}}],\"group_by\":{\"fields\":[{\"field\":\"string\",\"transform\":{\"transform\":\"$to_start_of_interval\",\"options\":{}}}],\"filters\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\"}]},\"columns\":[{\"field\":\"string\",\"transform\":{\"transform\":\"$to_start_of_interval\",\"options\":{}},\"name\":\"Sum of Risk\",\"func\":\"$sum\",\"options\":{}}],\"having\":[{\"field\":\"string\",\"op\":\"$eq\",\"value\":\"Rhea\",\"transform\":{\"transform\":\"$to_start_of_interval\",\"options\":{}},\"func\":\"$sum\",\"options\":{}}],\"sort\":{\"field\":\"string\",\"transform\":{\"transform\":\"$to_start_of_interval\",\"options\":{}},\"func\":\"$sum\",\"options\":{},\"order\":\"asc\"},\"results_size\":1}'"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Address": {
                "type": "object",
                "required": [
                    "country_code"
                ],
                "properties": {
                    "line1": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "example": "60 Rausch Street"
                    },
                    "line2": {
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "description": "Name of the city associated to this address.",
                        "maxLength": 255,
                        "nullable": true,
                        "example": "San Francisco"
                    },
                    "country_code": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "ISO-3166 country code",
                        "nullable": true,
                        "example": "US"
                    },
                    "region_code": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "ISO region code",
                        "nullable": true,
                        "example": "CA"
                    },
                    "postal_code": {
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true,
                        "example": "94103"
                    },
                    "fingerprint": {
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true,
                        "example": "8a33j2lir9"
                    }
                }
            },
            "AuthenticationMethod": {
                "type": "object",
                "required": [
                    "type"
                ],
                "example": {
                    "type": "$social",
                    "variant": "facebook"
                },
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/AuthenticationMethodType"
                    },
                    "variant": {
                        "type": "string",
                        "maxLength": 128
                    },
                    "email": {
                        "type": "string",
                        "format": "idn-email",
                        "description": "Used when `type` is `$email`"
                    },
                    "phone": {
                        "type": "string",
                        "format": "E.164",
                        "description": "Used when `type` is `$phone`"
                    }
                }
            },
            "AuthenticationMethodType": {
                "type": "string",
                "enum": [
                    "$authenticator",
                    "$biometrics",
                    "$email",
                    "$password",
                    "$phone",
                    "$push",
                    "$security_key",
                    "$social",
                    "$sso",
                    "$kba",
                    "$electronic_id",
                    "$physical_id",
                    "$document",
                    "$video",
                    "$other"
                ],
                "x-enumDescriptions": {
                    "$authenticator": "One time password, e.g. Google Authenticator.",
                    "$biometrics": "Apple FaceID/TouchID, Microsoft Hello, etc.",
                    "$document": "E.g. utility bill, bank statement, or proof of address.",
                    "$electronic_id": "Some countries have general eID in place while others integrate eVoting, eTax, eHealth and even public transport ticketing functionality. e.g. Swedish BankID, Danish NemID etc.",
                    "$email": "The individual is asked to provide an email address. You send a confirmation link or PIN code.",
                    "$kba": "A shared secret, for instance the user’s mother’s maiden name or favorite color.",
                    "$other": "Any other authentication method not defined as a default type.",
                    "$password": "Password based authentication.",
                    "$phone": "The individual is asked to provide a phone number. You send a confirmation PIN code over SMS or phone call.",
                    "$physical_id": "The individual is asked to submit a government ID such as a driver license, national ID, or passport.",
                    "$push": "E.g. mobile push notification",
                    "$security_key": "E.g. Yubikey, Google Titan",
                    "$social": "Authenticate in with Google, Facebook, Apple, etc.",
                    "$sso": "Authenticate via SAML, OpenID, e.g. Okta or Rippling",
                    "$video": "E.g. video call with support person"
                }
            },
            "AuthorType": {
                "type": "string",
                "enum": [
                    "$analyst_email",
                    "$castle_dashboard_user",
                    "$castle_policy",
                    "$user",
                    "$user_email",
                    "$other"
                ]
            },
            "Changeset": {
                "type": "object",
                "description": "An object containing information about attributes that changed due to the event. You can send either anonymous attributes (eg. to track password changes) or full attributes (eg. email changes). To simplify your implementation, Castle *automatically* tracks changes to name, email, and phone, however, if you have the `from` and `to` values at hand, you can also send the changeset yourself, which also allows you to specify changes a user’s password as well as any other custom attributes. Changes to custom attributes won’t be searchable in the dashboard, but they will appear in the event stream.",
                "maxProperties": 10,
                "properties": {
                    "password": {
                        "description": "Information that the password changed. Send this as `{ \"password\": { \"changed\": true } }`",
                        "$ref": "#/components/schemas/ChangedChangesetEntry"
                    },
                    "email": {
                        "description": "Email address change. You can also inform Castle that the email changed without sending the values explicitly: `{ \"email\": { \"changed\": true } }`",
                        "x-model-names": [
                            "ChangesetEntry",
                            "ChangedChangesetEntry"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChangedChangesetEntry"
                            },
                            {
                                "type": "object",
                                "required": [
                                    "from",
                                    "to"
                                ],
                                "properties": {
                                    "from": {
                                        "type": "string",
                                        "description": "Attribute value before the event."
                                    },
                                    "to": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Attribute value after the event."
                                    }
                                }
                            }
                        ]
                    },
                    "phone": {
                        "description": "Phone number change. You can also inform Castle that the phone changed without sending the values explicitly: `{ \"phone\": { \"changed\": true } }`",
                        "x-model-names": [
                            "ChangesetEntry",
                            "ChangedChangesetEntry"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChangedChangesetEntry"
                            },
                            {
                                "type": "object",
                                "required": [
                                    "from",
                                    "to"
                                ],
                                "properties": {
                                    "from": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Attribute value before the event."
                                    },
                                    "to": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Attribute value after the event."
                                    }
                                }
                            }
                        ]
                    },
                    "authentication_method.type": {
                        "x-model-names": [
                            "ChangesetEntry",
                            "ChangedChangesetEntry"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChangedChangesetEntry"
                            },
                            {
                                "type": "object",
                                "description": "Change to MFA method. Both from and to can be null.",
                                "properties": {
                                    "from": {
                                        "$ref": "#/components/schemas/AuthenticationMethodType"
                                    },
                                    "to": {
                                        "$ref": "#/components/schemas/AuthenticationMethodType"
                                    }
                                }
                            }
                        ]
                    },
                    "name": {
                        "x-model-names": [
                            "ChangesetEntry",
                            "ChangedChangesetEntry"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ChangedChangesetEntry"
                            },
                            {
                                "$ref": "#/components/schemas/ChangesetEntry"
                            }
                        ]
                    }
                },
                "additionalProperties": {
                    "x-model-names": [
                        "ChangesetEntry",
                        "ChangedChangesetEntry"
                    ],
                    "oneOf": [
                        {
                            "$ref": "#/components/schemas/ChangesetEntry"
                        },
                        {
                            "$ref": "#/components/schemas/ChangedChangesetEntry"
                        }
                    ]
                },
                "example": [
                    {
                        "password": {
                            "changed": true
                        },
                        "email": {
                            "from": "before@exmaple.com",
                            "to": "after@example.com"
                        },
                        "authentication_method.type": {
                            "from": "$authenticator",
                            "to": "$email"
                        },
                        "name": {
                            "from": null,
                            "to": "John Snow"
                        }
                    }
                ]
            },
            "ChangesetEntry": {
                "description": "Information that the attribute changed along with the changed values. Examples: `{ \"email\": { \"from\": \"a@example.com\", \"to\": \"b@example.com\" }`, `{ \"authentication_method.type\": { \"from\": null, \"to\": \"$push\" }`",
                "type": "object",
                "required": [
                    "from",
                    "to"
                ],
                "properties": {
                    "from": {
                        "type": "string",
                        "nullable": true,
                        "description": "Attribute value before the event",
                        "maxLength": 255
                    },
                    "to": {
                        "type": "string",
                        "nullable": true,
                        "description": "Attribute value after the event",
                        "maxLength": 255
                    }
                }
            },
            "ChangedChangesetEntry": {
                "description": "Information that the attribute changed along with the changed values. Examples: `{ \"password\": { \"changed\": true } }`",
                "type": "object",
                "required": [
                    "changed"
                ],
                "properties": {
                    "changed": {
                        "type": "boolean",
                        "enum": [
                            true
                        ]
                    }
                }
            },
            "Coordinates": {
                "type": "object",
                "required": [
                    "lat",
                    "lon"
                ],
                "properties": {
                    "lat": {
                        "type": "number",
                        "description": "Latitude coordinate",
                        "minimum": -90,
                        "maximum": 90
                    },
                    "lon": {
                        "type": "number",
                        "description": "Longitude coordinate",
                        "minimum": -180,
                        "maximum": 180
                    }
                }
            },
            "OrQueryFilter": {
                "type": "object",
                "required": [
                    "value",
                    "op"
                ],
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "$or"
                        ],
                        "example": "$or"
                    },
                    "value": {
                        "type": "array",
                        "x-discriminator-field": "op",
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "QueryFilter",
                                "RangeQueryFilter",
                                "RelativeRangeQueryFilter",
                                "ExistsQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/QueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RelativeRangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ExistsQueryFilter"
                                }
                            ]
                        }
                    }
                }
            },
            "RangeQueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                        "example": "name"
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$range"
                        ],
                        "example": "$range"
                    },
                    "value": {
                        "type": "object",
                        "properties": {
                            "gteq": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "x-types": {
                                    "isMultipleTypes": true,
                                    "values": [
                                        "str?",
                                        "int?",
                                        "float?"
                                    ]
                                }
                            },
                            "gt": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "x-types": {
                                    "isMultipleTypes": true,
                                    "values": [
                                        "str?",
                                        "int?",
                                        "float?"
                                    ]
                                }
                            },
                            "lteq": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "x-types": {
                                    "isMultipleTypes": true,
                                    "values": [
                                        "str?",
                                        "int?",
                                        "float?"
                                    ]
                                }
                            },
                            "lt": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ],
                                "x-types": {
                                    "isMultipleTypes": true,
                                    "values": [
                                        "str?",
                                        "int?",
                                        "float?"
                                    ]
                                }
                            }
                        },
                        "example": {
                            "gt": 2,
                            "lt": 10
                        }
                    }
                }
            },
            "RelativeRangeQueryFilter": {
                "type": "object",
                "description": "It allows querying data for relative time, eq. events within the last 1 hour.",
                "example": {
                    "field": "created_at",
                    "value": {
                        "gt": 3600
                    },
                    "op": "$relative_range"
                },
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                        "example": "name"
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$relative_range"
                        ],
                        "example": "$relative_range"
                    },
                    "value": {
                        "type": "object",
                        "properties": {
                            "gteq": {
                                "type": "integer"
                            },
                            "gt": {
                                "type": "integer"
                            },
                            "lteq": {
                                "type": "integer"
                            },
                            "lt": {
                                "type": "integer"
                            }
                        },
                        "example": {
                            "gt": 3600
                        }
                    }
                }
            },
            "ExistsQueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "example": "name",
                        "description": "Field name. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields."
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$exists",
                            "$nexists"
                        ],
                        "example": "$exists"
                    }
                }
            },
            "GeoQueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "field name to filter on",
                        "example": "name"
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$geo"
                        ],
                        "example": "$geo"
                    },
                    "value": {
                        "x-model-names": [
                            "BoundingBoxFilter",
                            "GeoDistanceFilter"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BoundingBoxFilter"
                            },
                            {
                                "$ref": "#/components/schemas/GeoDistanceFilter"
                            }
                        ]
                    }
                }
            },
            "BoundingBoxFilter": {
                "type": "object",
                "required": [
                    "top_left",
                    "bottom_right"
                ],
                "properties": {
                    "top_left": {
                        "$ref": "#/components/schemas/Coordinates"
                    },
                    "bottom_right": {
                        "$ref": "#/components/schemas/Coordinates"
                    }
                }
            },
            "GeoDistanceFilter": {
                "type": "object",
                "required": [
                    "distance",
                    "units",
                    "coordinates"
                ],
                "properties": {
                    "distance": {
                        "type": "number",
                        "minimum": 0,
                        "description": "Distance in radius from center point"
                    },
                    "units": {
                        "type": "string",
                        "description": "Units to filter geolocation by",
                        "enum": [
                            "mi",
                            "yd",
                            "km",
                            "m"
                        ]
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/Coordinates"
                    }
                }
            },
            "HavingQueryFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/QueryFilter"
                    },
                    {
                        "$ref": "#/components/schemas/UnnamedColumn"
                    }
                ]
            },
            "OrHavingQueryFilter": {
                "type": "object",
                "required": [
                    "value",
                    "op"
                ],
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "$or"
                        ],
                        "example": "$or"
                    },
                    "value": {
                        "type": "array",
                        "x-discriminator-field": "op",
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "HavingQueryFilter",
                                "RangeHavingQueryFilter",
                                "ExistsHavingQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/HavingQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeHavingQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ExistsHavingQueryFilter"
                                }
                            ]
                        }
                    }
                }
            },
            "RangeHavingQueryFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RangeQueryFilter"
                    },
                    {
                        "$ref": "#/components/schemas/UnnamedColumn"
                    }
                ]
            },
            "RelativeRangeHavingQueryFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RelativeRangeQueryFilter"
                    },
                    {
                        "$ref": "#/components/schemas/UnnamedColumn"
                    }
                ]
            },
            "ExistsHavingQueryFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ExistsQueryFilter"
                    },
                    {
                        "$ref": "#/components/schemas/UnnamedColumn"
                    }
                ]
            },
            "GeoHavingQueryFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GeoQueryFilter"
                    },
                    {
                        "$ref": "#/components/schemas/UnnamedColumn"
                    }
                ]
            },
            "BaseQuery": {
                "type": "object",
                "required": [
                    "filters"
                ],
                "properties": {
                    "filters": {
                        "type": "array",
                        "x-discriminator-field": "op",
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "QueryFilter",
                                "RangeQueryFilter",
                                "RelativeRangeQueryFilter",
                                "ExistsQueryFilter",
                                "GeoQueryFilter",
                                "OrQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/QueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RelativeRangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ExistsQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/OrQueryFilter"
                                }
                            ]
                        }
                    },
                    "query_type": {
                        "type": "string",
                        "enum": [
                            "$count",
                            "$records",
                            "$records_with_count"
                        ],
                        "default": "$records_with_count",
                        "description": "The type of query to perform.\n\n- `$count` returns the number of records matching the query (`total_count` will be present and `data` will be empty)\n- `$records` returns the records matching the query (`total_count` will be 0)\n- `$records_with_count` returns the number of records matching the query and the records matching the query\n"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1
                    }
                }
            },
            "QueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields."
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$in",
                            "$nin",
                            "$eq",
                            "$neq",
                            "$like",
                            "$nlike",
                            "$contains",
                            "$ncontains",
                            "$starts_with",
                            "$nstarts_with",
                            "$ends_with",
                            "$nends_with",
                            "$matches",
                            "$nmatches"
                        ],
                        "example": "$eq"
                    },
                    "value": {
                        "x-types": {
                            "isMultipleTypes": true,
                            "values": [
                                "str?",
                                "int?",
                                "float?",
                                "bool?",
                                "(array? & max_size?(1000))"
                            ]
                        },
                        "oneOf": [
                            {
                                "type": "string",
                                "example": "Rhea"
                            },
                            {
                                "type": "number",
                                "example": 2
                            },
                            {
                                "type": "boolean",
                                "example": true
                            },
                            {
                                "type": "array",
                                "maxItems": 1000,
                                "items": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "number"
                                        }
                                    ]
                                },
                                "example": [
                                    "Rhea"
                                ]
                            }
                        ],
                        "description": "Can be string, bool, numeric, or an array of string/numeric values"
                    }
                }
            },
            "QueryParams": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseQuery"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "aggregations": {
                                "type": "array",
                                "description": "EXPERIMENTAL! Array of aggregations to include in the response. \nFor each aggregation, you can reference its name in the `columns`, `sort`, and `having` fields.\n",
                                "maxItems": 1,
                                "x-discriminator-field": "aggregation_type",
                                "items": {
                                    "$ref": "#/components/schemas/AggregationRequest"
                                }
                            },
                            "columns": {
                                "type": "array",
                                "description": "Field names to return. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "Query": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/QueryParams"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "results_size": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10000
                            }
                        }
                    }
                ]
            },
            "Transform": {
                "type": "object",
                "description": "Describes how to transform the column value. The transformation is applied before the `func` aggregation function.",
                "required": [
                    "transform"
                ],
                "properties": {
                    "transform": {
                        "$ref": "#/components/schemas/Transforms"
                    },
                    "options": {
                        "type": "object",
                        "description": "Options specific for each transformation function"
                    }
                }
            },
            "Transforms": {
                "type": "string",
                "description": "All possible transformations",
                "enum": [
                    "$to_start_of_interval"
                ]
            },
            "GroupingField": {
                "type": "object",
                "required": [
                    "field"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Field name. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                        "maxLength": 255,
                        "minLength": 1
                    },
                    "transform": {
                        "$ref": "#/components/schemas/Transform"
                    }
                }
            },
            "Column": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GroupingField"
                    },
                    {
                        "type": "object",
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Display name of the column",
                                "maxLength": 255,
                                "example": "Sum of Risk"
                            },
                            "func": {
                                "$ref": "#/components/schemas/Func"
                            },
                            "options": {
                                "type": "object",
                                "description": "Options specific for each aggregation function"
                            }
                        }
                    }
                ]
            },
            "UnnamedColumn": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GroupingField"
                    },
                    {
                        "type": "object",
                        "required": [
                            "func"
                        ],
                        "properties": {
                            "func": {
                                "$ref": "#/components/schemas/Func"
                            },
                            "options": {
                                "type": "object",
                                "description": "Options specific for each aggregation function"
                            }
                        }
                    }
                ]
            },
            "ExportQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/QueryParams"
                    },
                    {
                        "type": "object",
                        "required": [
                            "email_to"
                        ],
                        "properties": {
                            "email_to": {
                                "type": "string",
                                "format": "idn-email"
                            },
                            "results_size": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 1000000
                            }
                        }
                    }
                ]
            },
            "GroupQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GroupQueryParams"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "results_size": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10000
                            }
                        }
                    }
                ]
            },
            "GroupQueryParams": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseQuery"
                    },
                    {
                        "type": "object",
                        "required": [
                            "group_by",
                            "columns"
                        ],
                        "properties": {
                            "aggregations": {
                                "type": "array",
                                "description": "EXPERIMENTAL! Array of aggregations to include in the response. \nFor each aggregation, you can reference its name in the `columns`, `sort`, and `having` fields.\n",
                                "maxItems": 1,
                                "x-discriminator-field": "aggregation_type",
                                "items": {
                                    "$ref": "#/components/schemas/AggregationRequest"
                                }
                            },
                            "group_by": {
                                "$ref": "#/components/schemas/GroupBy"
                            },
                            "columns": {
                                "type": "array",
                                "description": "Array of columns to return. Each column references a field and an aggregation function. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                                "maxItems": 50,
                                "minItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/Column"
                                }
                            },
                            "having": {
                                "description": "field should contain the \"name\" value from your columns",
                                "type": "array",
                                "x-discriminator-field": "op",
                                "items": {
                                    "type": "object",
                                    "x-model-names": [
                                        "HavingQueryFilter",
                                        "RangeHavingQueryFilter",
                                        "GeoHavingQueryFilter",
                                        "ExistsHavingQueryFilter",
                                        "OrHavingQueryFilter"
                                    ],
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/HavingQueryFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RangeHavingQueryFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ExistsHavingQueryFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/GeoHavingQueryFilter"
                                        },
                                        {
                                            "$ref": "#/components/schemas/OrHavingQueryFilter"
                                        }
                                    ]
                                }
                            },
                            "sort": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UnnamedColumn"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "order": {
                                                "type": "string",
                                                "enum": [
                                                    "asc",
                                                    "desc"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "ExportGroupQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GroupQueryParams"
                    },
                    {
                        "type": "object",
                        "required": [
                            "email_to"
                        ],
                        "properties": {
                            "email_to": {
                                "type": "string",
                                "format": "idn-email"
                            },
                            "results_size": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 1000000
                            }
                        }
                    }
                ]
            },
            "GroupBy": {
                "type": "object",
                "required": [
                    "fields"
                ],
                "properties": {
                    "fields": {
                        "type": "array",
                        "description": "the field names to group by. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.",
                        "maxItems": 5,
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/GroupingField"
                        }
                    },
                    "filters": {
                        "description": "The filters to apply to the grouping level. This let's you have separate filters on the grouping level compared to the top-level query. For example, you can query events in the last 24 hours with risk score > 90, group by user id and then compute aggregate columns with a 30-day time-range.",
                        "type": "array",
                        "x-discriminator-field": "op",
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "QueryFilter",
                                "RangeQueryFilter",
                                "ExistsQueryFilter",
                                "GeoQueryFilter",
                                "OrQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/QueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ExistsQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/OrQueryFilter"
                                }
                            ]
                        }
                    }
                }
            },
            "Buckets": {
                "type": "object",
                "required": [
                    "total_count",
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "example": [
                            {
                                "value": "*-0.6",
                                "count": 719,
                                "buckets": {}
                            },
                            {
                                "value": "0.6-0.9",
                                "count": 80,
                                "buckets": {}
                            },
                            {
                                "value": "0.9-*",
                                "count": 8,
                                "buckets": {}
                            }
                        ],
                        "items": {
                            "type": "object",
                            "required": [
                                "value",
                                "count",
                                "buckets"
                            ],
                            "properties": {
                                "value": {
                                    "description": "Value of the data that was aggregated on",
                                    "x-types": {
                                        "isMultipleTypes": true,
                                        "values": [
                                            "str?",
                                            "int?",
                                            "float?",
                                            "bool?"
                                        ],
                                        "oneOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "number"
                                            },
                                            {
                                                "type": "boolean"
                                            }
                                        ]
                                    }
                                },
                                "count": {
                                    "type": "integer",
                                    "description": "Total count of the aggregated value"
                                },
                                "buckets": {
                                    "type": "object",
                                    "description": "Buckets for query. Key is the bucket name and the value is an array of objects\nwith value and count keys\n"
                                }
                            }
                        }
                    },
                    "total_count": {
                        "type": "integer",
                        "minimum": 0,
                        "example": 1
                    }
                }
            },
            "CountQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseQuery"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "string",
                                "description": "bucket value from fields endpoint",
                                "example": "risk_count"
                            },
                            "options": {
                                "type": "object",
                                "description": "options to pass to query. see fields response",
                                "example": {
                                    "range": [
                                        0.3,
                                        0.6,
                                        0.9,
                                        1
                                    ]
                                }
                            },
                            "buckets": {
                                "type": "array",
                                "description": "additional buckets to aggregate on",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "name"
                                    ],
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "example": "sub_bucket_count"
                                        },
                                        "options": {
                                            "type": "object",
                                            "description": "options to pass to query. see fields response"
                                        }
                                    }
                                }
                            },
                            "group_by": {
                                "$ref": "#/components/schemas/GroupBy"
                            }
                        }
                    }
                ]
            },
            "Device": {
                "type": "object",
                "required": [
                    "user_agent",
                    "fingerprint",
                    "hardware",
                    "os",
                    "software"
                ],
                "properties": {
                    "user_agent": {
                        "type": "string",
                        "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36"
                    },
                    "fingerprint": {
                        "type": "string",
                        "nullable": true,
                        "example": "ohvjn8adSnetYTzZ8B7bOP"
                    },
                    "hardware": {
                        "type": "object",
                        "required": [
                            "type",
                            "name",
                            "brand",
                            "model"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "example": "computer"
                            },
                            "name": {
                                "type": "string",
                                "nullable": true,
                                "example": null
                            },
                            "brand": {
                                "type": "string",
                                "nullable": true,
                                "example": null
                            },
                            "model": {
                                "type": "object",
                                "required": [
                                    "name",
                                    "code"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "example": null
                                    },
                                    "code": {
                                        "type": "string",
                                        "nullable": true,
                                        "example": null
                                    }
                                }
                            }
                        }
                    },
                    "os": {
                        "type": "object",
                        "required": [
                            "name",
                            "version"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Windows 10"
                            },
                            "version": {
                                "type": "object",
                                "required": [
                                    "major",
                                    "full"
                                ],
                                "properties": {
                                    "major": {
                                        "type": "string",
                                        "nullable": true,
                                        "example": "10"
                                    },
                                    "full": {
                                        "type": "string",
                                        "example": null,
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    },
                    "software": {
                        "type": "object",
                        "required": [
                            "type",
                            "name",
                            "version"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "example": "browser"
                            },
                            "name": {
                                "type": "string",
                                "example": "Chrome"
                            },
                            "version": {
                                "type": "object",
                                "required": [
                                    "major",
                                    "full"
                                ],
                                "properties": {
                                    "major": {
                                        "type": "string",
                                        "nullable": true,
                                        "example": "91"
                                    },
                                    "full": {
                                        "type": "string",
                                        "nullable": true,
                                        "example": "91.0.4472"
                                    }
                                }
                            }
                        }
                    },
                    "timezone": {
                        "type": "object",
                        "properties": {
                            "offset": {
                                "type": "integer",
                                "nullable": true,
                                "example": -300,
                                "description": "Time offset from UTC measured in minutes"
                            }
                        }
                    }
                }
            },
            "IP": {
                "type": "object",
                "required": [
                    "connection",
                    "location",
                    "tags",
                    "value",
                    "coordinates"
                ],
                "properties": {
                    "connection": {
                        "type": "object",
                        "required": [
                            "asn",
                            "organization"
                        ],
                        "properties": {
                            "asn": {
                                "type": "integer",
                                "example": 14618
                            },
                            "organization": {
                                "type": "string",
                                "example": "Amazon.com"
                            }
                        }
                    },
                    "location": {
                        "type": "object",
                        "required": [
                            "city",
                            "continent_code",
                            "country_code",
                            "postal_code",
                            "region_code"
                        ],
                        "properties": {
                            "city": {
                                "type": "string",
                                "nullable": true,
                                "example": "Ashburn"
                            },
                            "continent_code": {
                                "type": "string",
                                "nullable": true,
                                "example": "NA"
                            },
                            "country_code": {
                                "type": "string",
                                "nullable": true,
                                "example": "US"
                            },
                            "postal_code": {
                                "type": "string",
                                "nullable": true,
                                "example": "20149"
                            },
                            "region_code": {
                                "type": "string",
                                "nullable": true,
                                "example": "VA"
                            }
                        }
                    },
                    "tags": {
                        "type": "string",
                        "items": {
                            "type": "string",
                            "enum": [
                                "datacenter",
                                "tor",
                                "proxy"
                            ]
                        },
                        "example": [
                            "datacenter"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "example": "34.200.81.5"
                    },
                    "coordinates": {
                        "$ref": "#/components/schemas/Coordinates"
                    }
                }
            },
            "Events": {
                "type": "object",
                "required": [
                    "total_count",
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        }
                    },
                    "total_count": {
                        "type": "integer",
                        "minimum": 0,
                        "example": 1
                    }
                }
            },
            "Event": {
                "type": "object",
                "required": [
                    "id",
                    "endpoint",
                    "type",
                    "status",
                    "risk",
                    "signals",
                    "properties",
                    "product",
                    "device",
                    "ip",
                    "policy",
                    "user",
                    "created_at",
                    "authenticated"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "ASZoelALT5-PaVw2pAVMXg"
                    },
                    "type": {
                        "type": "string",
                        "example": "$login"
                    },
                    "status": {
                        "type": "string",
                        "example": "$succeeded"
                    },
                    "risk": {
                        "type": "number",
                        "nullable": true,
                        "example": 0.396
                    },
                    "signals": {
                        "type": "array",
                        "example": [
                            "bot_behavior",
                            "multiple_accounts_per_device"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "abuse_ip",
                                "bot_behavior",
                                "credential_stuffing",
                                "disposable_email_domain",
                                "generated_email",
                                "headless_browser",
                                "http_client_library",
                                "impossible_travel",
                                "invalid_email",
                                "invalid_device_data",
                                "missing_device_data",
                                "missing_headers",
                                "multiple_accounts_per_device",
                                "multiple_aliases_per_email",
                                "new_country",
                                "new_device",
                                "new_device_type",
                                "new_isp",
                                "new_language",
                                "new_os",
                                "high_activity_device",
                                "high_activity_ip",
                                "high_activity_account",
                                "spoofed_device",
                                "web_crawler"
                            ]
                        }
                    },
                    "properties": {
                        "$ref": "#/components/schemas/Properties"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "device": {
                        "$ref": "#/components/schemas/Device"
                    },
                    "ip": {
                        "$ref": "#/components/schemas/IP"
                    },
                    "policy": {
                        "$ref": "#/components/schemas/Policy"
                    },
                    "user": {
                        "type": "object",
                        "required": [
                            "id",
                            "registered_at",
                            "email",
                            "phone",
                            "traits",
                            "last_seen_at",
                            "risk",
                            "devices_count",
                            "name"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "nullable": true,
                                "example": "220f785c-77a4-4532-ba23-f7e68388eebe"
                            },
                            "registered_at": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true,
                                "example": "2010-12-02T00:30:08.276Z"
                            },
                            "last_seen_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-12-02T03:40:03.226Z",
                                "nullable": true
                            },
                            "risk": {
                                "type": "number",
                                "example": 0.396
                            },
                            "devices_count": {
                                "type": "integer",
                                "example": 2
                            },
                            "name": {
                                "type": "string",
                                "nullable": true,
                                "example": "Rhea Franecki"
                            },
                            "email": {
                                "type": "string",
                                "format": "idn-email",
                                "nullable": true,
                                "example": "Rhea.Franecki+subaddress@example.org"
                            },
                            "phone": {
                                "type": "string",
                                "nullable": true,
                                "example": "+16175551212"
                            },
                            "traits": {
                                "description": "Known traits of the identified user",
                                "type": "object",
                                "nullable": true,
                                "example": {
                                    "organization_name": "Example Org"
                                }
                            },
                            "address": {
                                "$ref": "#/components/schemas/Address"
                            }
                        }
                    },
                    "params": {
                        "$ref": "#/components/schemas/EventParams"
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                    },
                    "authentication_method": {
                        "$ref": "#/components/schemas/AuthenticationMethod"
                    },
                    "page": {
                        "type": "object",
                        "required": [
                            "name",
                            "url"
                        ],
                        "properties": {
                            "name": {
                                "description": "Name of the page - for example the HTML page title or just a client-supplied value",
                                "type": "string",
                                "maxLength": 200
                            },
                            "url": {
                                "description": "URL of the current page",
                                "type": "string",
                                "maxLength": 2048
                            },
                            "referrer": {
                                "description": "The value of the HTTP referrer header",
                                "type": "string",
                                "maxLength": 2048
                            }
                        }
                    },
                    "screen": {
                        "type": "object",
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "name": {
                                "description": "The name of the current screen",
                                "type": "string",
                                "maxLength": 200
                            }
                        }
                    },
                    "scores": {
                        "type": "object",
                        "properties": {
                            "account_sharing": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "account_takeover": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "bot": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "multi_accounting": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "spoofed_device": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "spoofed_location": {
                                "$ref": "#/components/schemas/Score"
                            },
                            "unified": {
                                "$ref": "#/components/schemas/Score"
                            }
                        }
                    },
                    "changeset": {
                        "type": "object",
                        "additionalProperties": {
                            "x-name": "changeset",
                            "x-model-names": [
                                "ChangesetEntry",
                                "ChangedChangesetEntry"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ChangedChangesetEntry"
                                },
                                {
                                    "$ref": "#/components/schemas/ChangesetEntry"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-09-27T16:46:38.313Z"
                    }
                }
            },
            "Func": {
                "type": "string",
                "enum": [
                    "$sum",
                    "$last",
                    "$avg",
                    "$min",
                    "$max",
                    "$count",
                    "$top_k",
                    "$date_histogram"
                ],
                "description": "Aggregation function to be applied on the field",
                "example": "$sum"
            },
            "Op": {
                "type": "string",
                "enum": [
                    "$eq",
                    "$neq",
                    "$in",
                    "$nin",
                    "$range",
                    "$exists",
                    "$nexists",
                    "$geo",
                    "$like",
                    "$nlike",
                    "$contains",
                    "$ncontains",
                    "$starts_with",
                    "$nstarts_with",
                    "$ends_with",
                    "$nends_with"
                ],
                "example": "$eq"
            },
            "DataType": {
                "type": "string",
                "enum": [
                    "array",
                    "boolean",
                    "datetime",
                    "decimal",
                    "integer",
                    "ip",
                    "map",
                    "number",
                    "string",
                    "uuid"
                ],
                "example": "string"
            },
            "EventParams": {
                "type": "object",
                "description": "The params object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address sent by the user",
                        "example": "Rhea.Franecki@example.org"
                    },
                    "phone": {
                        "description": "The phone number sent by the user",
                        "type": "string",
                        "example": "+16175551212"
                    },
                    "username": {
                        "description": "The username sent by the user",
                        "type": "string",
                        "example": "superhero123"
                    }
                }
            },
            "Properties": {
                "type": "object",
                "description": "User defined properties",
                "maxProperties": 20,
                "additionalProperties": {
                    "oneOf": [
                        {
                            "type": "string",
                            "maxLength": 255
                        },
                        {
                            "type": "number"
                        },
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "object",
                            "additionalProperties": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "oneOf": [
                                                {
                                                    "type": "string",
                                                    "maxLength": 255
                                                },
                                                {
                                                    "type": "number"
                                                },
                                                {
                                                    "type": "boolean"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "array",
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "boolean"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "default": {}
            },
            "Policy": {
                "type": "object",
                "description": "The matching policy",
                "required": [
                    "name",
                    "id",
                    "revision_id",
                    "action"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the matching policy",
                        "type": "string",
                        "nullable": true,
                        "example": "Challenge risk >= 60"
                    },
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "example": "2ee938c8-24c2-4c26-9d25-19511dd75029"
                    },
                    "revision_id": {
                        "deprecated": true,
                        "type": "string",
                        "nullable": true,
                        "example": "900b183a-9f6d-4579-8c47-9ddcccf637b4"
                    },
                    "action": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "allow",
                            "challenge",
                            "deny"
                        ],
                        "example": "challenge"
                    }
                }
            },
            "Risk": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ChallengeRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/RegistrationRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/LoginRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ProfileUpdateRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ProfileResetRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/LogoutRiskRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CustomRiskRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "$login": "#/components/schemas/LoginRiskRequest",
                        "$challenge": "#/components/schemas/ChallengeRiskRequest",
                        "$custom": "#/components/schemas/CustomRiskRequest",
                        "$logout": "#/components/schemas/LogoutRiskRequest",
                        "$profile_reset": "#/components/schemas/ProfileResetRiskRequest",
                        "$profile_update": "#/components/schemas/ProfileUpdateRiskRequest",
                        "$registration": "#/components/schemas/RegistrationRiskRequest",
                        "$transaction": "#/components/schemas/TransactionRiskRequest"
                    }
                }
            },
            "Filter": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RegistrationFilterRequest"
                    },
                    {
                        "$ref": "#/components/schemas/LoginFilterRequest"
                    },
                    {
                        "$ref": "#/components/schemas/PasswordResetFilterRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CustomFilterRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ChallengeFilterRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionFilterRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "$login": "#/components/schemas/LoginFilterRequest",
                        "$challenge": "#/components/schemas/ChallengeFilterRequest",
                        "$custom": "#/components/schemas/CustomFilterRequest",
                        "$password_reset": "#/components/schemas/PasswordResetFilterRequest",
                        "$registration": "#/components/schemas/RegistrationFilterRequest",
                        "$transaction": "#/components/schemas/TransactionFilterRequest"
                    }
                }
            },
            "Log": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ChallengeLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CustomLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/LoginLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/PasswordResetLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ProfileResetLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ProfileUpdateLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/RegistrationLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/LogoutLogRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionLogRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "$login": "#/components/schemas/LoginLogRequest",
                        "$challenge": "#/components/schemas/ChallengeLogRequest",
                        "$custom": "#/components/schemas/CustomLogRequest",
                        "$logout": "#/components/schemas/LogoutLogRequest",
                        "$password_reset": "#/components/schemas/PasswordResetLogRequest",
                        "$profile_reset": "#/components/schemas/ProfileResetLogRequest",
                        "$profile_update": "#/components/schemas/ProfileUpdateLogRequest",
                        "$registration": "#/components/schemas/RegistrationLogRequest",
                        "$transaction": "#/components/schemas/TransactionLogRequest"
                    }
                }
            },
            "Transaction": {
                "type": "object",
                "required": [
                    "id",
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "$purchase",
                            "$withdrawal",
                            "$deposit",
                            "$transfer",
                            "$reward",
                            "$sale"
                        ],
                        "x-enumDescriptions": {
                            "$purchase": "The user purchased physical or digital goods from you or from another user on your platform.",
                            "$withdrawal": "The user withdrew balance into a bank account or debit card.",
                            "$deposit": "The user deposited balance into their account on your platform.",
                            "$transfer": "The user transferred balance between accounts on your platform.",
                            "$sale": "The user sold physical or digital goods to you or to another user on your platform."
                        }
                    },
                    "id": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "900b183a-9f6d-4579-8c47-9ddcccf637b4",
                        "description": "Unique identifier for this transaction. Use this to link the flow of your\ntransactions with different events and types\n"
                    },
                    "base_amount": {
                        "type": "string",
                        "pattern": "^\\d{1,9}(\\.\\d+)?$",
                        "example": "499.99",
                        "description": "Monetary amount of the transaction in your system's home currency, with two decimals"
                    },
                    "amount": {
                        "x-model-names": [
                            "FiatAmount",
                            "CryptoAmount"
                        ],
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FiatAmount"
                            },
                            {
                                "$ref": "#/components/schemas/CryptoAmount"
                            }
                        ]
                    },
                    "payment_method": {
                        "$ref": "#/components/schemas/PaymentMethod"
                    },
                    "shipping_address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "merchant": {
                        "$ref": "#/components/schemas/Merchant"
                    }
                }
            },
            "PaymentMethod": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "$aba",
                            "$ach",
                            "$amazon_pay",
                            "$android_pay",
                            "$apple_pay",
                            "$blinc",
                            "$boleto",
                            "$card",
                            "$crypto_wallet",
                            "$fps",
                            "$google_pay",
                            "$other",
                            "$paypal",
                            "$samsung_pay",
                            "$sen",
                            "$sepa",
                            "$signet",
                            "$wire"
                        ]
                    },
                    "fingerprint": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "holder_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "bank_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "country_code": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 3
                    },
                    "billing_address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "card": {
                        "type": "object",
                        "properties": {
                            "bin": {
                                "type": "string",
                                "pattern": "(^\\d{6}$)|(^\\d{8}$)"
                            },
                            "last4": {
                                "type": "string",
                                "pattern": "^\\d{4}$"
                            },
                            "exp_month": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 12
                            },
                            "exp_year": {
                                "type": "integer",
                                "minimum": 2000,
                                "maximum": 2100
                            },
                            "network": {
                                "type": "string",
                                "enum": [
                                    "$amex",
                                    "$cartes_bancaires",
                                    "$diners",
                                    "$discover",
                                    "$interac",
                                    "$jcb",
                                    "$mastercard",
                                    "$other",
                                    "$unionpay",
                                    "$visa"
                                ]
                            },
                            "funding": {
                                "type": "string",
                                "enum": [
                                    "$credit",
                                    "$debit",
                                    "$other",
                                    "$prepaid"
                                ]
                            }
                        }
                    }
                }
            },
            "Merchant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "a2c8e7ef-40da-42f2-9b7d-cd928e5f8279",
                        "description": "Merchant Identifier"
                    },
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "example": "United Airlines",
                        "description": "Merchant Name"
                    },
                    "category": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "pattern": "^\\d{4}$",
                                "example": "3000",
                                "description": "Merchant Category Code (MCC) in ISO 18245 four-digit format"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 255,
                                "example": "Airlines",
                                "description": "Merchant Category Description"
                            }
                        }
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    }
                }
            },
            "Product": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "If you have multiple products that your users can log into using the same credentials, populate this field so that you can segment the data in the dashboard by product."
                    }
                }
            },
            "Session": {
                "type": "object",
                "description": "Additional session information from your system",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "A unique session identifier from your system. You should hash the value before sending it to Castle"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the session was created"
                    }
                }
            },
            "FiatAmount": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "$fiat"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d{1,9}(\\.\\d+)?$",
                        "example": "499.99",
                        "description": "Monetary amount of transaction with decimals"
                    },
                    "currency": {
                        "type": "string",
                        "description": "ISO Currency denomination, required when value is provided\n\n| Code | Description |\n| - | - |\n| AED | UAE Dirham |\n| ALL | Albanian Lek |\n| AMD | Armenian Dram |\n| ANG | Antillian Guilder |\n| AOA | Angolan Kwanza |\n| ARS | Nuevo Argentine Peso |\n| AUD | Australian Dollar |\n| AWG | Aruban Guilder |\n| AZN | Azerbaijani manat |\n| BAM | Bosnia and Herzegovina Convertible Marks |\n| BBD | Barbados Dollar |\n| BDT | Banggladesh Taka |\n| BGN | New Bulgarian Lev |\n| BHD | Bahraini Dinar |\n| BMD | Bermudian Dollar |\n| BND | Brunei Dollar |\n| BOB | Bolivia Boliviano |\n| BRL | Brazilian Real |\n| BSD | Bahamian Dollar |\n| BWP | Botswana Pula |\n| BYN | New Belarusian Ruble |\n| BZD | Belize Dollar |\n| CAD | Canadian Dollar |\n| CHF | Swiss Franc |\n| CLP | Chilean Peso |\n| CNY | Yuan Renminbi |\n| COP | Colombian Peso |\n| CRC | Costa Rican Colon |\n| CUP | Cuban Peso |\n| CVE | Cape Verdi Escudo |\n| CZK | Czech Koruna |\n| DJF | Djibouti Franc |\n| DKK | Danish Krone |\n| DOP | Dominican Republic Peso |\n| DZD | Algerian Dinar |\n| EGP | Egyptian Pound |\n| ETB | Ethiopian Birr |\n| EUR | Euro |\n| FJD | Fiji Dollar |\n| FKP | Falkland Islands Pound |\n| GBP | Pound Sterling |\n| GEL | Georgian Lari |\n| GHS | Ghanaian Cedi |\n| GIP | Gibraltar Pound |\n| GMD | Gambia Delasi |\n| GNF | Guinea Franc |\n| GTQ | Guatemala Quetzal |\n| GYD | Guyanese Dollar |\n| HKD | Hong Kong Dollar |\n| HNL | Honduras Lempira |\n| HRK | Croatia Kuna |\n| HTG | Haitian Gourde |\n| HUF | Hungarian Forint |\n| IDR | Indonesian Rupiah |\n| ILS | New Israeli Scheqel |\n| INR | Indian Rupee |\n| IQD | Iraqi Dinar |\n| ISK | Iceland Krona |\n| JMD | Jamaican Dollar |\n| JOD | Jordanian Dinar |\n| JPY | Japanese Yen |\n| KES | Kenyan Shilling |\n| KGS | Kyrgyzstan Som |\n| KHR | Cambodia Riel |\n| KMF | Comoro Franc |\n| KRW | South-Korean Won |\n| KWD | Kuwaiti Dinar |\n| KYD | Cayman Islands Dollar |\n| KZT | Kazakhstani Tenge |\n| LAK | Laos Kip |\n| LBP | Lebanese Pound |\n| LKR | Sri Lanka Rupee |\n| LYD | Libyan Dinar |\n| MAD | Moroccan Dirham |\n| MDL | Moldovia Leu |\n| MKD | Macedonian Denar |\n| MMK | Myanmar Kyat |\n| MNT | Mongolia Tugrik |\n| MOP | Macau Pataca |\n| MRU | Mauritania Ouguiya |\n| MUR | Mauritius Rupee |\n| MVR | Maldives Rufiyaa |\n| MWK | Malawi Kwacha |\n| MXN | Mexican Peso |\n| MYR | Malaysian Ringgit |\n| MZN | Mozambican Metical |\n| NAD | Namibian Dollar |\n| NGN | Nigerian Naira |\n| NIO | Nicaragua Cordoba Oro |\n| NOK | Norwegian Krone |\n| NPR | Nepalese Rupee |\n| NZD | New Zealand Dollar |\n| OMR | Rial Omani |\n| PAB | Panamanian Balboa |\n| PEN | Peruvian Nuevo Sol |\n| PGK | New Guinea Kina |\n| PHP | Philippine Peso |\n| PKR | Pakistan Rupee |\n| PLN | New Polish Zloty |\n| PYG | Paraguay Guarani |\n| QAR | Qatari Rial |\n| RON | New Romanian Lei |\n| RSD | Serbian Dinar |\n| RUB | Russian Ruble |\n| RWF | Rwanda Franc |\n| SAR | Saudi Riyal |\n| SBD | Solomon Island Dollar |\n| SCR | Seychelles Rupee |\n| SEK | Swedish Krone |\n| SGD | Singapore Dollar |\n| SHP | St. Helena Pound |\n| SLL | Sierra Leone Leone |\n| SOS | Somalia Shilling |\n| SRD | Surinamese Dollar |\n| STN | Sao Tome & Principe Dobra |\n| SVC | El Salvador Colón |\n| SZL | Swaziland Lilangeni |\n| THB | Thai Baht |\n| TND | Tunisian Dinar |\n| TOP | Tonga Pa'anga |\n| TRY | New Turkish Lira |\n| TTD | Trinidad & Tobago Dollar |\n| TWD | New Taiwan Dollar |\n| TZS | Tanzanian Shilling |\n| UAH | Ukraine Hryvnia |\n| UGX | Uganda Shilling |\n| USD | US Dollar |\n| UYU | Peso Uruguayo |\n| UZS | Uzbekistani Som |\n| VEF | Venezuelan Bolívar |\n| VND | Vietnamese New Dong |\n| VUV | Vanuatu Vatu |\n| WST | Samoan Tala |\n| XAF | CFA Franc BEAC |\n| XCD | East Caribbean Dollar |\n| XOF | CFA Franc BCEAO |\n| XPF | CFP Franc |\n| YER | Yemeni Rial |\n| ZAR | South African Rand |\n| ZMW | Zambian Kwacha |\n",
                        "example": "USD",
                        "enum": [
                            "AED",
                            "ALL",
                            "AMD",
                            "ANG",
                            "AOA",
                            "ARS",
                            "AUD",
                            "AWG",
                            "AZN",
                            "BAM",
                            "BBD",
                            "BDT",
                            "BGN",
                            "BHD",
                            "BMD",
                            "BND",
                            "BOB",
                            "BRL",
                            "BSD",
                            "BWP",
                            "BYN",
                            "BZD",
                            "CAD",
                            "CHF",
                            "CLP",
                            "CNY",
                            "COP",
                            "CRC",
                            "CUP",
                            "CVE",
                            "CZK",
                            "DJF",
                            "DKK",
                            "DOP",
                            "DZD",
                            "EGP",
                            "ETB",
                            "EUR",
                            "FJD",
                            "FKP",
                            "GBP",
                            "GEL",
                            "GHS",
                            "GIP",
                            "GMD",
                            "GNF",
                            "GTQ",
                            "GYD",
                            "HKD",
                            "HNL",
                            "HRK",
                            "HTG",
                            "HUF",
                            "IDR",
                            "ILS",
                            "INR",
                            "IQD",
                            "ISK",
                            "JMD",
                            "JOD",
                            "JPY",
                            "KES",
                            "KGS",
                            "KHR",
                            "KMF",
                            "KRW",
                            "KWD",
                            "KYD",
                            "KZT",
                            "LAK",
                            "LBP",
                            "LKR",
                            "LYD",
                            "MAD",
                            "MDL",
                            "MKD",
                            "MMK",
                            "MNT",
                            "MOP",
                            "MRU",
                            "MUR",
                            "MVR",
                            "MWK",
                            "MXN",
                            "MYR",
                            "MZN",
                            "NAD",
                            "NGN",
                            "NIO",
                            "NOK",
                            "NPR",
                            "NZD",
                            "OMR",
                            "PAB",
                            "PEN",
                            "PGK",
                            "PHP",
                            "PKR",
                            "PLN",
                            "PYG",
                            "QAR",
                            "RON",
                            "RSD",
                            "RUB",
                            "RWF",
                            "SAR",
                            "SBD",
                            "SCR",
                            "SEK",
                            "SGD",
                            "SHP",
                            "SLL",
                            "SOS",
                            "SRD",
                            "STN",
                            "SVC",
                            "SZL",
                            "THB",
                            "TND",
                            "TOP",
                            "TRY",
                            "TTD",
                            "TWD",
                            "TZS",
                            "UAH",
                            "UGX",
                            "USD",
                            "UYU",
                            "UZS",
                            "VEF",
                            "VND",
                            "VUV",
                            "WST",
                            "XAF",
                            "XCD",
                            "XOF",
                            "XPF",
                            "YER",
                            "ZAR",
                            "ZMW"
                        ]
                    }
                }
            },
            "CryptoAmount": {
                "type": "object",
                "required": [
                    "type"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "$crypto"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d{1,9}(\\.\\d+)?$",
                        "example": "1.512342352",
                        "description": "Monetary amount of transaction with decimals"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Digital currency code, required when value is provided",
                        "example": "BTC"
                    }
                }
            },
            "FilterAndRiskResponse": {
                "type": "object",
                "required": [
                    "policy",
                    "signals",
                    "device"
                ],
                "properties": {
                    "risk": {
                        "description": "Deprecated Risk Score - use `scores` instead. Calculated only when `request_token` and `context` are provided.",
                        "deprecated": true,
                        "minimum": 0,
                        "maximum": 1,
                        "type": "number",
                        "readOnly": true,
                        "example": 0.65
                    },
                    "scores": {
                        "readOnly": true,
                        "description": "Castle Scores breakdown. Calculated only when `request_token` and `context` are provided.",
                        "type": "object",
                        "required": [
                            "account_abuse",
                            "account_takeover",
                            "bot"
                        ],
                        "properties": {
                            "account_abuse": {
                                "type": "object",
                                "required": [
                                    "score"
                                ],
                                "properties": {
                                    "score": {
                                        "description": "Calculated Account Abuse Risk Score.",
                                        "minimum": 0,
                                        "maximum": 1,
                                        "type": "number",
                                        "readOnly": true,
                                        "example": 0.65
                                    }
                                }
                            },
                            "account_takeover": {
                                "type": "object",
                                "required": [
                                    "score"
                                ],
                                "properties": {
                                    "score": {
                                        "description": "Calculated Account Takeover Risk Score.",
                                        "minimum": 0,
                                        "maximum": 1,
                                        "type": "number",
                                        "readOnly": true,
                                        "example": 0.77
                                    }
                                }
                            },
                            "bot": {
                                "type": "object",
                                "required": [
                                    "score"
                                ],
                                "properties": {
                                    "score": {
                                        "description": "Calculated Bot Risk Score.",
                                        "minimum": 0,
                                        "maximum": 1,
                                        "type": "number",
                                        "readOnly": true,
                                        "example": 0.34
                                    }
                                }
                            }
                        }
                    },
                    "policy": {
                        "readOnly": true,
                        "$ref": "#/components/schemas/Policy"
                    },
                    "signals": {
                        "description": "Signals triggered for this event/context",
                        "readOnly": true,
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "example": {
                            "bot_behavior": {},
                            "proxy_ip": {},
                            "disposable_email": {},
                            "spoofed_device": {},
                            "multiple_accounts_per_device": {}
                        }
                    },
                    "device": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Device"
                            },
                            {
                                "type": "object",
                                "readOnly": true,
                                "properties": {
                                    "token": {
                                        "description": "Device token generated or found",
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true,
                                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJ0b2tlbiI6IjEzc2x6RzNHQ0RzeFJCejdJWF9SUDJkV1Y0RFgiLCJxdWFsaWZpZXIiOiJBUUlEQ2pFME5EZzFPREF3T1RZIiwiYW5vbnltb3VzIjpmYWxzZSwidmVyc2lvbiI6MC4zfQ.y3vOt-W1IpOi7Oyn1jll1uDw1YL-JPZtNMTU-PyaYhQ"
                                    }
                                }
                            }
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "Castle Event ID",
                        "readOnly": true,
                        "example": "ASZoelALT5-PaVw2pAVMXg"
                    },
                    "name": {
                        "type": "string",
                        "description": "Event Full Name",
                        "example": "Login Succeeded"
                    },
                    "type": {
                        "type": "string",
                        "description": "Event type",
                        "readOnly": true,
                        "example": "$login"
                    },
                    "status": {
                        "type": "string",
                        "description": "Event status",
                        "readOnly": true,
                        "example": "$succeeded"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Event timestamp",
                        "example": "2021-09-27T16:46:38.313Z"
                    },
                    "authenticated": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Authenticated or Anonymous visitor",
                        "example": true
                    },
                    "authentication_method": {
                        "$ref": "#/components/schemas/AuthenticationMethod",
                        "description": "Indicates Authentication Method included in the request"
                    },
                    "changeset": {
                        "$ref": "#/components/schemas/Changeset"
                    },
                    "email": {
                        "type": "object",
                        "readOnly": true,
                        "description": "User Email Object",
                        "properties": {
                            "normalized": {
                                "type": "string",
                                "example": "user.email@example.com"
                            },
                            "domain": {
                                "type": "string",
                                "example": "gmail.com"
                            },
                            "disposable": {
                                "type": "boolean",
                                "example": false
                            }
                        }
                    },
                    "endpoint": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Castle Request Endpoint",
                        "example": "/v1/risk"
                    },
                    "ip": {
                        "$ref": "#/components/schemas/IP"
                    },
                    "params": {
                        "$ref": "#/components/schemas/EventParams"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "sdks": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Castle SDKs details",
                        "properties": {
                            "client": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "castle-web"
                                    },
                                    "version": {
                                        "type": "string",
                                        "example": "2.0.0"
                                    }
                                }
                            },
                            "server": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "castle-postman"
                                    },
                                    "version": {
                                        "type": "string",
                                        "example": "0.1.0"
                                    }
                                }
                            }
                        }
                    },
                    "session": {
                        "$ref": "#/components/schemas/Session"
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserForMonitorAndRisk"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/Properties"
                    }
                }
            },
            "BaseRequest": {
                "type": "object",
                "properties": {
                    "context": {
                        "$ref": "#/components/schemas/Context"
                    },
                    "properties": {
                        "description": "User defined properties associated with this device",
                        "type": "object",
                        "maxProperties": 20,
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Properties"
                        }
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "session": {
                        "$ref": "#/components/schemas/Session"
                    },
                    "created_at": {
                        "description": "The default value is the time of which the event was received by Castle. If you’re passing events in a delayed fashion, such as via an event queue, you should make sure to set this field to the time of which the event was tracked and put into the queue.",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "LogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "created_at": {
                                "nullable": true,
                                "type": "string",
                                "description": "The ISO8601 timestamp for event creation",
                                "format": "date-time"
                            },
                            "request_token": {
                                "description": "Token generated from a client. Check out our [quick start guide](https://docs.castle.io/docs/quickstart)\nto generate a `request_token`\n",
                                "type": "string",
                                "format": "highwind_v2_parsable",
                                "example": "test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4"
                            },
                            "user": {
                                "type": "object",
                                "oneOf": [
                                    {
                                        "required": [
                                            "phone"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "email"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "id"
                                        ]
                                    }
                                ],
                                "properties": {
                                    "email": {
                                        "description": "The identified user's email address",
                                        "type": "string",
                                        "format": "idn-email"
                                    },
                                    "phone": {
                                        "description": "The identified user's phone number",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "A unique user identifier",
                                        "type": "string",
                                        "minLength": 1,
                                        "maxLength": 255
                                    },
                                    "registered_at": {
                                        "description": "The ISO8601 timestamp of the user's account creation",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "name": {
                                        "description": "The full name of the user",
                                        "type": "string"
                                    },
                                    "traits": {
                                        "description": "Known traits of the identified user",
                                        "type": "object"
                                    },
                                    "address": {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                },
                                "example": {
                                    "id": "78184d37-a8a0-4f61-a05a-9a8ed85b1e43"
                                }
                            }
                        }
                    }
                ]
            },
            "ChallengeLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$challenge",
                                "enum": [
                                    "$challenge"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$requested",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "ChallengeRiskRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$challenge",
                                "enum": [
                                    "$challenge"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$requested",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "ChallengeFilterRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$challenge",
                                "enum": [
                                    "$challenge"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$requested",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "CustomLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$custom",
                                "enum": [
                                    "$custom"
                                ]
                            },
                            "name": {
                                "type": "string",
                                "description": "Your custom name of the event.",
                                "maxLength": 255
                            },
                            "created_at": {
                                "nullable": true,
                                "type": "string",
                                "description": "The ISO8601 timestamp for event creation",
                                "format": "date-time"
                            },
                            "user": {
                                "type": "object",
                                "anyOf": [
                                    {
                                        "required": [
                                            "phone"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "email"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "id"
                                        ]
                                    }
                                ],
                                "properties": {
                                    "email": {
                                        "description": "The identified user's email address",
                                        "type": "string",
                                        "format": "idn-email"
                                    },
                                    "phone": {
                                        "description": "The identified user's phone number",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "A unique user identifier",
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "registered_at": {
                                        "description": "The ISO8601 timestamp of the user's account creation",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "name": {
                                        "description": "The full name of the user",
                                        "type": "string"
                                    },
                                    "traits": {
                                        "description": "Known traits of the identified user",
                                        "type": "object"
                                    }
                                },
                                "example": {
                                    "id": "78184d37-a8a0-4f61-a05a-9a8ed85b1e43"
                                }
                            }
                        }
                    }
                ]
            },
            "LoginLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$login",
                                "enum": [
                                    "$login"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "LogoutLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$logout",
                                "enum": [
                                    "$logout"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$succeeded"
                                ]
                            }
                        }
                    }
                ]
            },
            "PasswordResetLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$password_reset_request",
                                "enum": [
                                    "$password_reset_request"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            }
                        }
                    }
                ]
            },
            "ProfileResetLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$profile_reset",
                                "enum": [
                                    "$profile_reset"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            }
                        }
                    }
                ]
            },
            "PrivacyRequest": {
                "type": "object",
                "required": [
                    "identifier",
                    "identifier_type"
                ],
                "properties": {
                    "identifier": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "ID or e-mail address of a user.",
                        "example": "Rhea.Franecki@example.org"
                    },
                    "identifier_type": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Type of a provided identifier.",
                        "enum": [
                            "$id",
                            "$email"
                        ],
                        "example": "$email"
                    }
                }
            },
            "ProfileUpdateLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$profile_update",
                                "enum": [
                                    "$profile_update"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            }
                        }
                    }
                ]
            },
            "RegistrationLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$registration",
                                "enum": [
                                    "$registration"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "BaseItem": {
                "type": "object",
                "description": "List Item",
                "properties": {
                    "primary_value": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Value of the `primary_field` as described by the List definition. For example, if `primary_field` is configured to be the Event `user.id`, the `primary_value` on the List Item referes to the actual User ID value.",
                        "example": "A04t7AcfSA69cBTTusx0RQ"
                    },
                    "secondary_value": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 255,
                        "description": "Optional secondary value. If this value is set, it means that for a List Item to match an Event, both the `primary_value` and `secondary_value` must match.",
                        "example": "2ee938c8-24c2-4c26-9d25-19511dd75029"
                    },
                    "comment": {
                        "type": "string",
                        "maxLength": 2048,
                        "description": "An arbitrary string that can be used to eg. explain why this List Item was created. Often useful to display to other users.",
                        "example": "Fradulent user found through manual inspection"
                    },
                    "author": {
                        "$ref": "#/components/schemas/ListItemAuthor"
                    },
                    "auto_archives_at": {
                        "type": "string",
                        "nullable": true,
                        "format": "date-time",
                        "description": "Time after which a the List Item will be automatically archived and no longer matched against each event. A value of `null` means auto archivation is disabled and the record will stay active in the list forever.",
                        "example": "2021-09-27T16:46:38.313Z"
                    }
                }
            },
            "ListItemAuthor": {
                "type": "object",
                "description": "Indicates who or how the list item was created. Typically, this refers to the user that created the item from within the Castle Dashboard, or the policy ID if it was automatically created via automation.",
                "required": [
                    "type",
                    "identifier"
                ],
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/AuthorType"
                    },
                    "identifier": {
                        "type": "string",
                        "maxLength": 255
                    }
                }
            },
            "ListItem": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseItem"
                    },
                    {
                        "type": "object",
                        "description": "List Item",
                        "required": [
                            "id",
                            "list_id",
                            "primary_value"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "2ee938c8-24c2-4c26-9d25-19511dd75029"
                            },
                            "list_id": {
                                "type": "string",
                                "description": "ID of the List to which this List Item belongs to",
                                "example": "2ee938c8-24c2-4c26-9d25-19511dd75029"
                            },
                            "archived": {
                                "type": "boolean"
                            },
                            "auto_archives_at": {
                                "type": "string",
                                "nullable": true,
                                "format": "date-time",
                                "description": "Time after which a the List Item will be automatically archived and no longer matched against each event. A value of `null` means auto archivation is disabled and the record will stay active in the list forever.",
                                "example": "2021-09-27T16:46:38.313Z"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-09-27T16:46:38.313Z"
                            }
                        }
                    }
                ]
            },
            "ListItemRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseItem"
                    },
                    {
                        "type": "object",
                        "required": [
                            "primary_value",
                            "author"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "mode": {
                                "type": "string",
                                "default": "error",
                                "description": "Describes a strategy to use when a List Item with the same `(primary, secondary)` values is already in the List. Available strategies:\n  - `$error` - return a 422 HTTP error\n  - `$replace` - archive the existing List Item and create a new one\n  - `$update` - if the author matches the existing List Item, update it. Otherwise, throw an HTTP 422 error.\n  - `$update_or_replace` - if the author matches the existing List Item, update it. Otherwise, archive the existing List Item and create a new one.\n",
                                "enum": [
                                    "$error",
                                    "$replace",
                                    "$update",
                                    "$update_or_replace"
                                ]
                            }
                        }
                    }
                ]
            },
            "ListItemList": {
                "type": "object",
                "required": [
                    "data"
                ],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListItem"
                        }
                    }
                }
            },
            "ListItemQuery": {
                "type": "object",
                "description": "List Item Query",
                "properties": {
                    "page": {
                        "description": "Page number",
                        "minimum": 1,
                        "maximum": 1000,
                        "type": "integer",
                        "example": 2
                    },
                    "results_size": {
                        "description": "How many records to show per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "example": 50
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ListItemQueryWithSort"
                    },
                    {
                        "$ref": "#/components/schemas/ListItemQueryWithoutSort"
                    }
                ]
            },
            "ListItemQueryWithoutSort": {
                "properties": {
                    "filters": {
                        "type": "array",
                        "maxItems": 100,
                        "x-discriminator-field": "op",
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "ListItemQueryFilter",
                                "ListItemOrQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ListItemQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ListItemOrQueryFilter"
                                }
                            ],
                            "discriminator": {
                                "propertyName": "op",
                                "mapping": {
                                    "$eq": "#/components/schemas/ListItemQueryFilter",
                                    "$or": "#/components/schemas/ListItemOrQueryFilter"
                                }
                            }
                        },
                        "description": "Additional filters to query list items by fields and archival status",
                        "example": [
                            {
                                "field": "primary_value",
                                "op": "$eq",
                                "value": "Uc80JFKRRvm"
                            },
                            {
                                "field": "archived",
                                "op": "$eq",
                                "value": false
                            },
                            {
                                "op": "$or",
                                "value": [
                                    {
                                        "field": "secondary_value",
                                        "op": "$eq",
                                        "value": "1"
                                    }
                                ]
                            },
                            {
                                "op": "$or",
                                "value": [
                                    {
                                        "field": "secondary_value",
                                        "op": "$eq",
                                        "value": "2"
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "ListItemQueryWithSort": {
                "properties": {
                    "sort": {
                        "type": "object",
                        "description": "List Item sort order, based on creation timestamp",
                        "required": [
                            "field",
                            "order"
                        ],
                        "properties": {
                            "field": {
                                "type": "string",
                                "enum": [
                                    "created_at"
                                ],
                                "example": "created_at",
                                "description": "created_at is the only allowed field for sorting List Items"
                            },
                            "order": {
                                "type": "string",
                                "enum": [
                                    "asc",
                                    "desc"
                                ],
                                "example": "asc"
                            }
                        }
                    },
                    "filters": {
                        "type": "array",
                        "maxItems": 1,
                        "items": {
                            "type": "object",
                            "required": [
                                "field",
                                "op",
                                "value"
                            ],
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "enum": [
                                        "archived"
                                    ],
                                    "example": "archived"
                                },
                                "op": {
                                    "type": "string",
                                    "enum": [
                                        "$eq"
                                    ],
                                    "example": "$eq"
                                },
                                "value": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                }
            },
            "ListItemQueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "enum": [
                            "primary_value",
                            "secondary_value",
                            "archived"
                        ],
                        "description": "List Item field name",
                        "example": "primary_value"
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$eq"
                        ],
                        "example": "$eq"
                    },
                    "value": {
                        "x-types": {
                            "isMultipleTypes": true,
                            "values": [
                                "str?",
                                "bool?"
                            ]
                        },
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ],
                        "description": "Can be string or bool",
                        "example": "effb8e3c-084c-4d3e-b7ee-f8741b79c8d2"
                    }
                }
            },
            "ListItemOrQueryFilter": {
                "type": "object",
                "required": [
                    "value",
                    "op"
                ],
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "$or"
                        ],
                        "example": "$or"
                    },
                    "value": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/ListItemQueryFilter"
                        }
                    }
                }
            },
            "UpdateListItemRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "comment"
                        ],
                        "properties": {
                            "comment": {
                                "type": "string",
                                "maxLength": 2048,
                                "description": "An arbitrary string that can be used to eg. explain why this List Item was created. Often useful to display to other users.",
                                "example": "Listed due to manual investigation"
                            }
                        }
                    }
                ]
            },
            "UnarchiveListItemRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "auto_archives_at": {
                                "type": "string",
                                "nullable": true,
                                "format": "date-time",
                                "description": "Time after which a the List Item will be automatically archived and no longer matched against each event. A value of `null` means auto archivation is disabled and the record will stay active in the list forever.",
                                "example": "2021-09-27T16:46:38.313Z"
                            }
                        }
                    }
                ]
            },
            "BaseList": {
                "type": "object",
                "description": "List",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Name of the List",
                        "example": "Malicious IPs"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true,
                        "description": "Description of the List",
                        "example": "We block these IPs from withdrawing funds. Please be careful."
                    },
                    "color": {
                        "$ref": "#/components/schemas/ListColor"
                    },
                    "default_item_archivation_time": {
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "maximum": 63113904,
                        "description": "Default time, in seconds, after which Items in this List automatically gets archived after they are created. It is possible to override this value when creating the individual List Items",
                        "example": 2592000
                    }
                }
            },
            "List": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseList"
                    },
                    {
                        "type": "object",
                        "description": "List",
                        "required": [
                            "id",
                            "name",
                            "color",
                            "primary_field"
                        ],
                        "properties": {
                            "id": {
                                "type": "string",
                                "example": "2ee938c8-24c2-4c26-9d25-19511dd75029"
                            },
                            "primary_field": {
                                "$ref": "#/components/schemas/ListPrimaryField"
                            },
                            "secondary_field": {
                                "$ref": "#/components/schemas/ListSecondaryField"
                            },
                            "archived_at": {
                                "nullable": true,
                                "type": "string",
                                "description": "Timestamp of when the List was archived. If this value is `null`, it means the list is active.",
                                "format": "date-time",
                                "example": "2021-09-27T16:46:38.313Z"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2021-09-27T16:46:38.313Z"
                            }
                        }
                    }
                ]
            },
            "ListColor": {
                "type": "string",
                "description": "Color assigned to the List. These colors can be used to represent different sentiments, such as red for blocked records or green for trusted.",
                "enum": [
                    "$red",
                    "$orange",
                    "$yellow",
                    "$green",
                    "$blue",
                    "$purple",
                    "$gray"
                ],
                "example": "$red"
            },
            "ListPrimaryField": {
                "type": "string",
                "description": "Event field for which the List Item value will be matched against, such as `user.id` or `device.fingerprint`.",
                "maxLength": 255,
                "example": "device.fingerprint"
            },
            "ListSecondaryField": {
                "type": "string",
                "nullable": true,
                "maxLength": 255,
                "description": "A secondary event field for which the List Item value will be matched against. Warning: make sure you input a correct field name",
                "example": "ip.value"
            },
            "UpdateListRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseList"
                    },
                    {
                        "type": "object"
                    }
                ]
            },
            "ListRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseList"
                    },
                    {
                        "type": "object",
                        "required": [
                            "name",
                            "color",
                            "primary_field"
                        ],
                        "properties": {
                            "primary_field": {
                                "$ref": "#/components/schemas/ListPrimaryField"
                            },
                            "secondary_field": {
                                "$ref": "#/components/schemas/ListSecondaryField"
                            }
                        }
                    }
                ]
            },
            "ListList": {
                "type": "array",
                "description": "List of Lists",
                "items": {
                    "type": "object",
                    "$ref": "#/components/schemas/List"
                }
            },
            "ListQuery": {
                "type": "object",
                "description": "List Query",
                "properties": {
                    "filters": {
                        "type": "array",
                        "maxItems": 100,
                        "x-discriminator-field": "op",
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "ListQueryFilter",
                                "ListOrQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ListQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ListOrQueryFilter"
                                }
                            ],
                            "discriminator": {
                                "propertyName": "op",
                                "mapping": {
                                    "$eq": "#/components/schemas/ListQueryFilter",
                                    "$or": "#/components/schemas/ListOrQueryFilter"
                                }
                            }
                        },
                        "description": "Additional filters to query lists by fields and archival status",
                        "example": [
                            {
                                "field": "primary_field",
                                "op": "$eq",
                                "value": "device.fingerprint"
                            },
                            {
                                "field": "archived",
                                "op": "$eq",
                                "value": false
                            },
                            {
                                "op": "$or",
                                "value": [
                                    {
                                        "field": "secondary_field",
                                        "op": "$eq",
                                        "value": "user.id"
                                    }
                                ]
                            },
                            {
                                "op": "$or",
                                "value": [
                                    {
                                        "field": "secondary_field",
                                        "op": "$eq",
                                        "value": "user.email"
                                    }
                                ]
                            }
                        ]
                    },
                    "page": {
                        "description": "Page number",
                        "minimum": 1,
                        "maximum": 1000,
                        "type": "integer",
                        "example": 2
                    },
                    "results_size": {
                        "description": "How many records to show per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "example": 50
                    },
                    "include_size_label": {
                        "description": "Whether to include the size label in the response",
                        "type": "boolean",
                        "example": true
                    },
                    "sort": {
                        "type": "object",
                        "description": "List sort order, based on creation timestamp",
                        "required": [
                            "field",
                            "order"
                        ],
                        "properties": {
                            "field": {
                                "type": "string",
                                "enum": [
                                    "created_at"
                                ],
                                "example": "created_at",
                                "description": "\"created_at\" is the only allowed field for sorting Lists"
                            },
                            "order": {
                                "type": "string",
                                "enum": [
                                    "asc",
                                    "desc"
                                ],
                                "example": "asc"
                            }
                        }
                    }
                }
            },
            "ListQueryResponse": {
                "type": "array",
                "description": "List Query Response",
                "items": {
                    "allOf": [
                        {
                            "$ref": "#/components/schemas/List"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "size_label": {
                                    "type": "string",
                                    "description": "The size label of the list. This is only returned if `include_size_label` is set to `true` in the request.",
                                    "example": "9852"
                                }
                            }
                        }
                    ]
                }
            },
            "ListQueryFilter": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "value"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "enum": [
                            "primary_field",
                            "secondary_field",
                            "archived"
                        ],
                        "description": "List field name",
                        "example": "primary_field"
                    },
                    "op": {
                        "type": "string",
                        "enum": [
                            "$eq"
                        ],
                        "example": "$eq"
                    },
                    "value": {
                        "x-types": {
                            "isMultipleTypes": true,
                            "values": [
                                "str?",
                                "bool?"
                            ]
                        },
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ],
                        "description": "Can be string or bool",
                        "example": "effb8e3c-084c-4d3e-b7ee-f8741b79c8d2"
                    }
                }
            },
            "ListOrQueryFilter": {
                "type": "object",
                "required": [
                    "value",
                    "op"
                ],
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "$or"
                        ],
                        "example": "$or"
                    },
                    "value": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/ListQueryFilter"
                        }
                    }
                }
            },
            "Aggregation": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AggregationBase"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "aggregation_type": {
                                "type": "string",
                                "enum": [
                                    "$avg",
                                    "$count",
                                    "$count_uniq",
                                    "$first",
                                    "$last",
                                    "$max",
                                    "$min",
                                    "$sum"
                                ]
                            },
                            "id": {
                                "type": "integer",
                                "description": "ID of the Aggregation",
                                "example": 118
                            },
                            "author": {
                                "type": "object",
                                "description": "Indicates who created the record.",
                                "properties": {
                                    "type": {
                                        "$ref": "#/components/schemas/AuthorType"
                                    },
                                    "identifier": {
                                        "type": "string",
                                        "maxLength": 255
                                    }
                                }
                            },
                            "active": {
                                "type": "boolean",
                                "description": "Indicates whether the Aggregation is active or not."
                            },
                            "created_at": {
                                "type": "string",
                                "description": "Timestamp of when Aggregation was created.",
                                "format": "date-time",
                                "example": "2022-10-23T17:21:39.213Z"
                            },
                            "updated_at": {
                                "type": "string",
                                "description": "Timestamp of when Aggregation was last updated.",
                                "format": "date-time",
                                "example": "2022-10-23T17:21:39.213Z"
                            },
                            "archived_at": {
                                "type": "string",
                                "description": "Timestamp of when Aggregation was archived.",
                                "format": "date-time",
                                "example": "2022-10-23T17:21:39.213Z"
                            }
                        }
                    }
                ]
            },
            "AggregationBase": {
                "type": "object",
                "description": "Aggregation",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255,
                        "description": "Human-readable name of the aggregation",
                        "example": "Critical Events per IP in 1h"
                    },
                    "description": {
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true,
                        "description": "Description of the aggregation",
                        "example": "Maximum Account TakeOver score seen per IP in the last day."
                    },
                    "interval": {
                        "type": "integer",
                        "description": "Time interval in seconds over which aggregation should be observed. Maximum is 180 days.",
                        "example": 86400,
                        "minimum": 0,
                        "maximum": 15552000
                    },
                    "group_by": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                            "fields": {
                                "type": "array",
                                "description": "The fields names to group by",
                                "maxItems": 5,
                                "minItems": 1,
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "field"
                                    ],
                                    "properties": {
                                        "field": {
                                            "type": "string",
                                            "maxLength": 255,
                                            "minLength": 1,
                                            "example": "ip.address"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "filters": {
                        "type": "array",
                        "maxItems": 100,
                        "x-discriminator-field": "op",
                        "items": {
                            "type": "object",
                            "x-model-names": [
                                "QueryFilter",
                                "ExistsQueryFilter",
                                "RangeQueryFilter",
                                "RelativeRangeQueryFilter",
                                "OrQueryFilter"
                            ],
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/QueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/ExistsQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/RelativeRangeQueryFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/OrQueryFilter"
                                }
                            ]
                        },
                        "description": "Event filters to define when aggregation should be triggered."
                    },
                    "value": {
                        "type": "object",
                        "description": "Field name where to get the value from for the aggregation",
                        "required": [
                            "field"
                        ],
                        "properties": {
                            "field": {
                                "type": "string",
                                "description": "Field name",
                                "example": "scores.account_takeover.score"
                            }
                        }
                    }
                }
            },
            "AggregationRequest": {
                "x-model-names": [
                    "AggregationRequestWithValue",
                    "AggregationRequestWithoutValue"
                ],
                "x-discriminator-field": "aggregation_type",
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AggregationRequestWithValue"
                    },
                    {
                        "$ref": "#/components/schemas/AggregationRequestWithoutValue"
                    }
                ],
                "discriminator": {
                    "propertyName": "aggregation_type",
                    "mapping": {
                        "$avg": "#/components/schemas/AggregationRequestWithValue",
                        "$count": "#/components/schemas/AggregationRequestWithoutValue",
                        "$count_uniq": "#/components/schemas/AggregationRequestWithValue",
                        "$first": "#/components/schemas/AggregationRequestWithValue",
                        "$last": "#/components/schemas/AggregationRequestWithValue",
                        "$max": "#/components/schemas/AggregationRequestWithValue",
                        "$min": "#/components/schemas/AggregationRequestWithValue",
                        "$sum": "#/components/schemas/AggregationRequestWithValue"
                    }
                }
            },
            "AggregationRequestWithValue": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AggregationBase"
                    },
                    {
                        "type": "object",
                        "required": [
                            "name",
                            "aggregation_type",
                            "interval",
                            "value"
                        ],
                        "properties": {
                            "aggregation_type": {
                                "type": "string",
                                "enum": [
                                    "$avg",
                                    "$count_uniq",
                                    "$first",
                                    "$last",
                                    "$max",
                                    "$min",
                                    "$sum"
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        }
                    }
                ]
            },
            "AggregationRequestWithoutValue": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/AggregationBase"
                    },
                    {
                        "type": "object",
                        "required": [
                            "name",
                            "aggregation_type",
                            "interval"
                        ],
                        "properties": {
                            "aggregation_type": {
                                "type": "string",
                                "enum": [
                                    "$count"
                                ]
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "type": "object",
                "description": "Metadata is useful for providing additional, structured information on an object.",
                "allOf": [
                    {
                        "properties": {
                            "whodunnit": {
                                "type": "string",
                                "maxLength": 255
                            },
                            "whodunnit_type": {
                                "$ref": "#/components/schemas/AuthorType"
                            }
                        }
                    },
                    {
                        "additionalProperties": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "maxLength": 255
                                },
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "boolean"
                                }
                            ]
                        },
                        "maxProperties": 20
                    }
                ]
            },
            "TransactionLogRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LogRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$transaction",
                                "enum": [
                                    "$transaction"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "transaction": {
                                "$ref": "#/components/schemas/Transaction"
                            }
                        }
                    }
                ]
            },
            "FilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "context",
                            "request_token"
                        ],
                        "properties": {
                            "request_token": {
                                "description": "Token generated from a client. Check out our [quick start guide](https://docs.castle.io/docs/quickstart)\nto generate a `request_token`\n",
                                "type": "string",
                                "format": "highwind_v2_parsable",
                                "example": "test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4"
                            },
                            "user": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "The identified user's email address",
                                        "example": "Rhea.Franecki@example.org",
                                        "deprecated": true
                                    },
                                    "phone": {
                                        "description": "The identified user's phone number",
                                        "type": "string",
                                        "example": "+16175551212",
                                        "deprecated": true
                                    }
                                }
                            },
                            "params": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "The email address sent by the user",
                                        "example": "Rhea.Franecki@example.org"
                                    },
                                    "phone": {
                                        "description": "The phone number sent by the user",
                                        "type": "string",
                                        "example": "+16175551212"
                                    },
                                    "username": {
                                        "description": "The username sent by the user",
                                        "type": "string",
                                        "example": "superhero123"
                                    }
                                }
                            },
                            "matching_user_id": {
                                "description": "User id related connected with the request",
                                "type": "string",
                                "example": "123"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/RequestWithOptionalValidation"
                    },
                    {
                        "$ref": "#/components/schemas/RequestWithExpand"
                    }
                ]
            },
            "RegistrationFilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$registration",
                                "enum": [
                                    "$registration"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$attempted",
                                "enum": [
                                    "$attempted",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "LoginFilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$login",
                                "enum": [
                                    "$login"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$attempted",
                                "enum": [
                                    "$attempted",
                                    "$failed"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "PasswordResetFilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$password_reset_request",
                                "enum": [
                                    "$password_reset_request"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$attempted",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            }
                        }
                    }
                ]
            },
            "TransactionFilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$transaction",
                                "enum": [
                                    "$transaction"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$attempted",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "transaction": {
                                "$ref": "#/components/schemas/Transaction"
                            }
                        }
                    }
                ]
            },
            "CustomFilterRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$custom",
                                "enum": [
                                    "$custom"
                                ]
                            },
                            "name": {
                                "type": "string",
                                "description": "Your custom name of the event.",
                                "maxLength": 255
                            }
                        }
                    }
                ]
            },
            "RiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "context",
                            "type",
                            "request_token",
                            "status",
                            "user"
                        ],
                        "properties": {
                            "request_token": {
                                "description": "Token generated from a client. Check out our [quick start guide](/v1/getting-started)\nto generate a `request_token`\n",
                                "type": "string",
                                "format": "highwind_v2_parsable",
                                "example": "test_lZWva9rsNe3u0_EIc6R8V3t5beV38piPAQbhgREGygYCAo2FRSv1tAQ4-cb6ArKHOWK_zG18hO1uZ8K0LDbNqU9njuhscoLyaj3NyGxyiO0iS4ziIkm-oVom3LEsN9i6InSbuzo-w7ErJqrkYW2CrjA23LEyN92wIkCE82dggvktPtWvMmrl42Bj2uM7Zdn2AQGXC6qGTIECRlwaAgZcgcAGeX4"
                            },
                            "user": {
                                "$ref": "#/components/schemas/UserForMonitorAndRisk"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/RequestWithOptionalValidation"
                    },
                    {
                        "$ref": "#/components/schemas/RequestWithExpand"
                    }
                ]
            },
            "RegistrationRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$registration",
                                "enum": [
                                    "$registration"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$succeeded"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "LoginRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$login",
                                "enum": [
                                    "$login"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$succeeded"
                                ]
                            },
                            "authentication_method": {
                                "$ref": "#/components/schemas/AuthenticationMethod"
                            }
                        }
                    }
                ]
            },
            "LogoutRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$logout",
                                "enum": [
                                    "$logout"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$succeeded"
                                ]
                            }
                        }
                    }
                ]
            },
            "TransactionRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "status"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$transaction",
                                "enum": [
                                    "$transaction"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "transaction": {
                                "$ref": "#/components/schemas/Transaction"
                            }
                        }
                    }
                ]
            },
            "ProfileUpdateRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$profile_update",
                                "enum": [
                                    "$profile_update"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "changeset": {
                                "$ref": "#/components/schemas/Changeset"
                            }
                        }
                    }
                ]
            },
            "ProfileResetRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$profile_reset",
                                "enum": [
                                    "$profile_reset"
                                ]
                            },
                            "status": {
                                "type": "string",
                                "default": "$succeeded",
                                "enum": [
                                    "$attempted",
                                    "$succeeded",
                                    "$failed"
                                ]
                            },
                            "changeset": {
                                "$ref": "#/components/schemas/Changeset"
                            }
                        }
                    }
                ]
            },
            "CustomRiskRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RiskRequest"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Castle supported events available for this endpoint",
                                "default": "$custom",
                                "enum": [
                                    "$custom"
                                ]
                            },
                            "name": {
                                "type": "string",
                                "description": "Your custom name of the event.",
                                "maxLength": 255
                            }
                        }
                    }
                ]
            },
            "Context": {
                "type": "object",
                "required": [
                    "ip",
                    "headers"
                ],
                "properties": {
                    "headers": {
                        "description": "The Headers object of the originating request. \nFor best results, it's recommended to forward all headers from the originating request. At minimum, the following headers should be forwarded: `Host`, `User-Agent`, `Accept`, `Accept-Encoding`, `Accept-Language`.\n",
                        "type": "array",
                        "items": {
                            "description": "An array of header values with key as the first element and the value as the second.\nPass the string value as-is for the best calculation.\n",
                            "type": "array",
                            "maxItems": 2,
                            "minItems": 2,
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "example": [
                            [
                                "User-Agent",
                                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15"
                            ],
                            [
                                "Accept-Encoding",
                                "gzip, deflate, br"
                            ],
                            [
                                "Accept-Language",
                                "en-us"
                            ],
                            [
                                "Accept",
                                "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
                            ],
                            [
                                "Connection",
                                "close"
                            ],
                            [
                                "Host",
                                "castle.io"
                            ]
                        ]
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IPv4 or IPv6 address of the originating request. Must be a valid, public IP. Supports ipv4\nand ipv6\n",
                        "example": "211.96.77.55"
                    }
                }
            },
            "Error": {
                "type": "object",
                "readOnly": true,
                "required": [
                    "type",
                    "message"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "record_invalid",
                            "bad_request",
                            "unauthorized",
                            "record_not_found",
                            "forbidden",
                            "missing_headers",
                            "invalid_header_value",
                            "invalid_request_token",
                            "service_unavailable",
                            "server_error",
                            "route_not_found"
                        ]
                    },
                    "message": {
                        "readOnly": true,
                        "description": "reason for error message",
                        "type": "string"
                    }
                }
            },
            "Score": {
                "type": "object",
                "required": [
                    "score"
                ],
                "properties": {
                    "score": {
                        "type": "number",
                        "nullable": true,
                        "example": 0.396
                    }
                }
            },
            "SearchSchema": {
                "type": "object",
                "required": [
                    "fields",
                    "buckets"
                ],
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchField"
                        }
                    },
                    "buckets": {
                        "type": "array",
                        "x-discriminator-field": "type",
                        "items": {
                            "x-model-names": [
                                "DateHistogramBucket",
                                "RangeBucket",
                                "CountBucket",
                                "GeoHashBucket"
                            ],
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/CountBucket"
                                },
                                {
                                    "$ref": "#/components/schemas/DateHistogramBucket"
                                },
                                {
                                    "$ref": "#/components/schemas/RangeBucket"
                                }
                            ]
                        }
                    }
                }
            },
            "SearchField": {
                "type": "object",
                "required": [
                    "field",
                    "op",
                    "func",
                    "type",
                    "nice_name",
                    "description"
                ],
                "properties": {
                    "field": {
                        "type": "string",
                        "description": "Name of the field",
                        "example": "user.id"
                    },
                    "op": {
                        "type": "array",
                        "description": "List of operations that can be performed on this field",
                        "items": {
                            "$ref": "#/components/schemas/Op"
                        },
                        "example": [
                            "$eq",
                            "$neq"
                        ]
                    },
                    "func": {
                        "type": "array",
                        "description": "List of functions that can be applied on this field",
                        "items": {
                            "$ref": "#/components/schemas/Func"
                        },
                        "example": [
                            "$top_k"
                        ]
                    },
                    "transform": {
                        "type": "array",
                        "description": "List of transformations that can be applied on this field",
                        "items": {
                            "$ref": "#/components/schemas/Transforms"
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/DataType"
                    },
                    "nice_name": {
                        "type": "string",
                        "description": "Human-readable name of the field",
                        "example": "User ID"
                    },
                    "description": {
                        "type": "string",
                        "description": "Human-readable description of the field",
                        "example": "User ID sent by the client to Castle"
                    },
                    "min": {
                        "description": "Minimal value for the field",
                        "x-types": {
                            "isMultipleTypes": true,
                            "values": [
                                "str?",
                                "int?",
                                "float?"
                            ]
                        },
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "max": {
                        "description": "Maximal value for the field",
                        "x-types": {
                            "isMultipleTypes": true,
                            "values": [
                                "str?",
                                "int?",
                                "float?"
                            ]
                        },
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "enum": {
                        "type": "array",
                        "description": "List of possible values for this field",
                        "items": {
                            "type": "string"
                        }
                    },
                    "source": {
                        "type": "array",
                        "description": "Indicates which SDKs can send this field",
                        "items": {
                            "type": "string",
                            "enum": [
                                "ios",
                                "android",
                                "web"
                            ]
                        }
                    },
                    "example": {
                        "type": "string",
                        "description": "Example value of this field",
                        "example": "9610c462-fe50-4e6e-a714-9c4377be209d"
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit of the field. This can be '%' for battery_level, 'ms' for time, etc."
                    }
                }
            },
            "BaseBucket": {
                "type": "object",
                "required": [
                    "name",
                    "field"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the aggregation",
                        "example": "user_id_count"
                    },
                    "field": {
                        "type": "string",
                        "description": "Name of the field the bucket is based on",
                        "example": "user.id"
                    }
                }
            },
            "CountBucket": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseBucket"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "$count"
                                ],
                                "example": "$count"
                            },
                            "options": {
                                "type": "object",
                                "properties": {
                                    "size": {
                                        "type": "object",
                                        "required": [
                                            "data_type"
                                        ],
                                        "properties": {
                                            "data_type": {
                                                "type": "string",
                                                "default": "integer",
                                                "enum": [
                                                    "integer"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "GeoHashBucket": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseBucket"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "options"
                        ],
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "$geo_hash"
                                ],
                                "example": "$geo_hash"
                            },
                            "options": {
                                "type": "object",
                                "required": [
                                    "precision"
                                ],
                                "properties": {
                                    "precision": {
                                        "type": "object",
                                        "required": [
                                            "data_type"
                                        ],
                                        "properties": {
                                            "data_type": {
                                                "type": "string",
                                                "default": "integer",
                                                "enum": [
                                                    "integer"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "DateHistogramBucket": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseBucket"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "options"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "created_at_histogram"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "$date_histogram"
                                ]
                            },
                            "options": {
                                "type": "object",
                                "required": [
                                    "interval"
                                ],
                                "properties": {
                                    "interval": {
                                        "type": "object",
                                        "required": [
                                            "required",
                                            "data_type",
                                            "enum"
                                        ],
                                        "properties": {
                                            "required": {
                                                "type": "boolean"
                                            },
                                            "data_type": {
                                                "type": "string",
                                                "default": "string",
                                                "enum": [
                                                    "string"
                                                ]
                                            },
                                            "enum": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "1m",
                                                        "2m",
                                                        "3m",
                                                        "4m",
                                                        "5m",
                                                        "6m",
                                                        "10m",
                                                        "15m",
                                                        "20m",
                                                        "30m",
                                                        "1h",
                                                        "2h",
                                                        "3h",
                                                        "4h",
                                                        "6h",
                                                        "8h",
                                                        "12h",
                                                        "1d",
                                                        "36h",
                                                        "2d",
                                                        "60h",
                                                        "3d",
                                                        "84h",
                                                        "4d",
                                                        "108h",
                                                        "5d",
                                                        "132h",
                                                        "6d",
                                                        "7d",
                                                        "10d",
                                                        "14d"
                                                    ]
                                                },
                                                "example": [
                                                    "1m",
                                                    "2m",
                                                    "5m"
                                                ]
                                            }
                                        }
                                    },
                                    "min": {
                                        "type": "object",
                                        "required": [
                                            "data_type"
                                        ],
                                        "properties": {
                                            "data_type": {
                                                "type": "string",
                                                "default": "string",
                                                "enum": [
                                                    "string"
                                                ]
                                            },
                                            "format": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "date-time"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "max": {
                                        "type": "object",
                                        "required": [
                                            "data_type"
                                        ],
                                        "properties": {
                                            "data_type": {
                                                "type": "string",
                                                "default": "string",
                                                "enum": [
                                                    "string"
                                                ]
                                            },
                                            "format": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "enum": [
                                                        "date-time"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "size": {
                                        "type": "object",
                                        "required": [
                                            "data_type"
                                        ],
                                        "properties": {
                                            "data_type": {
                                                "type": "string",
                                                "default": "integer",
                                                "enum": [
                                                    "integer"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "RangeBucket": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseBucket"
                    },
                    {
                        "type": "object",
                        "required": [
                            "type",
                            "options"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "risk_count"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "$range"
                                ]
                            },
                            "options": {
                                "type": "object",
                                "required": [
                                    "ranges"
                                ],
                                "properties": {
                                    "ranges": {
                                        "type": "object",
                                        "required": [
                                            "required",
                                            "data_type"
                                        ],
                                        "properties": {
                                            "required": {
                                                "type": "boolean"
                                            },
                                            "data_type": {
                                                "type": "string",
                                                "enum": [
                                                    "string",
                                                    "number"
                                                ],
                                                "example": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "UserForMonitorAndRisk": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "A unique user identifier",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "email": {
                        "description": "The identified user's email address",
                        "type": "string",
                        "format": "idn-email"
                    },
                    "phone": {
                        "description": "The identified user's phone number E.164 formatted",
                        "type": "string",
                        "format": "E.164"
                    },
                    "registered_at": {
                        "description": "The ISO8601 timestamp of the user's account creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "description": "The full name of the user",
                        "type": "string"
                    },
                    "traits": {
                        "description": "Known traits of the identified user",
                        "nullable": true,
                        "type": "object"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    }
                }
            },
            "RequestWithOptionalValidation": {
                "type": "object",
                "properties": {
                    "skip_request_token_validation": {
                        "description": "Skip `request_token` validation. Enable when it's impossible to obtain Castle request_token (e.g., third-party API calls).\nWhen enabled, Castle risk scores are not calculated.\n",
                        "type": "boolean",
                        "default": false
                    },
                    "skip_context_validation": {
                        "description": "Skip `context` validation. Enable when HTTP request context is not providing useful insight\n(e.g., third-party API calls from Data Center IP).\n",
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "RequestWithExpand": {
                "type": "object",
                "properties": {
                    "expand": {
                        "description": "Include additional properties into API response.\n*This option is currently in beta and available only to select customers.*\n",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "all"
                        ]
                    }
                }
            }
        },
        "responses": {
            "NotFound": {
                "description": "Not found"
            },
            "Conflict": {
                "description": "Entity is being modified by a concurrent request."
            },
            "Accepted": {
                "description": "Accepted"
            },
            "Unauthorized": {
                "description": "You are missing the Authorization header, or the API secret is missing or incorrect."
            },
            "Forbidden": {
                "description": "The request is rejected because the service is not enabled for this account."
            },
            "UnprocessableEntity": {
                "description": "The request body is unprocessable by the API. Make sure it conforms to the specified format for the endpoint.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Error"
                        }
                    }
                }
            },
            "TooManyRequests": {
                "description": "You performed too many requests. You should back off and retry using the exponential backoff algorithm."
            },
            "InternalServerError": {
                "description": "There’s an issue on our end."
            }
        },
        "securitySchemes": {
            "Basic": {
                "type": "http",
                "scheme": "basic",
                "description": "API keys are used to authenticate all Castle APIs. In the [Castle Dashboard](https://dashboard.castle.io) you can view and manage your API keys.\n\n**Castle API keys are secret. Make sure to not share them in publicly accessible areas such as GitHub or client-side code.**\n\nAll endpoints are authenticated via [HTTP Basic Auth](http://en.wikipedia.org/wiki/Basic_access_authentication), using password and **no username**. This means setting the value of the  `Authorization` header to a Base64 encoded string using your API_SECRET with a leading \":\", eg. `\"Basic\" + base64(:API_SECRET)`. If the authorization header is missing or incorrect, the API will respond with `401`.\n"
            }
        }
    }
}